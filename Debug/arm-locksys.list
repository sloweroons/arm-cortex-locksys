
arm-locksys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800435c  0800435c  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  0800435c  0800435c  0000535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004364  08004364  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004368  08004368  00005368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800436c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006078  2**0
                  CONTENTS
 10 .bss          00000124  20000078  20000078  00006078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  00006078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea99  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241a  00000000  00000000  00014b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  00016f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000982  00000000  00000000  00017b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023076  00000000  00000000  0001851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116d0  00000000  00000000  0003b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d25a6  00000000  00000000  0004cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f206  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003204  00000000  00000000  0011f24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00122450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004278 	.word	0x08004278

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08004278 	.word	0x08004278

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	@ 0x30
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
 80004f6:	4b5e      	ldr	r3, [pc, #376]	@ (8000670 <MX_GPIO_Init+0x194>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a5d      	ldr	r2, [pc, #372]	@ (8000670 <MX_GPIO_Init+0x194>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	4b5b      	ldr	r3, [pc, #364]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	61bb      	str	r3, [r7, #24]
 800050c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	4b57      	ldr	r3, [pc, #348]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	4a56      	ldr	r2, [pc, #344]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000518:	f043 0320 	orr.w	r3, r3, #32
 800051c:	6313      	str	r3, [r2, #48]	@ 0x30
 800051e:	4b54      	ldr	r3, [pc, #336]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	f003 0320 	and.w	r3, r3, #32
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a4f      	ldr	r2, [pc, #316]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b4d      	ldr	r3, [pc, #308]	@ (8000670 <MX_GPIO_Init+0x194>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <MX_GPIO_Init+0x194>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a48      	ldr	r2, [pc, #288]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b46      	ldr	r3, [pc, #280]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a41      	ldr	r2, [pc, #260]	@ (8000670 <MX_GPIO_Init+0x194>)
 800056c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b3f      	ldr	r3, [pc, #252]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a3a      	ldr	r2, [pc, #232]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b38      	ldr	r3, [pc, #224]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MK_Output_3_Pin|MK_Output_2_Pin|MK_Output_1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2115      	movs	r1, #21
 800059e:	4835      	ldr	r0, [pc, #212]	@ (8000674 <MX_GPIO_Init+0x198>)
 80005a0:	f001 f8f8 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	4833      	ldr	r0, [pc, #204]	@ (8000678 <MX_GPIO_Init+0x19c>)
 80005aa:	f001 f8f3 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	4832      	ldr	r0, [pc, #200]	@ (800067c <MX_GPIO_Init+0x1a0>)
 80005b4:	f001 f8ee 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80005be:	4830      	ldr	r0, [pc, #192]	@ (8000680 <MX_GPIO_Init+0x1a4>)
 80005c0:	f001 f8e8 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MK_Input_4_Pin;
 80005c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MK_Input_4_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4828      	ldr	r0, [pc, #160]	@ (800067c <MX_GPIO_Init+0x1a0>)
 80005da:	f000 ff17 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MK_Output_3_Pin|MK_Output_2_Pin|MK_Output_1_Pin;
 80005de:	2315      	movs	r3, #21
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	481f      	ldr	r0, [pc, #124]	@ (8000674 <MX_GPIO_Init+0x198>)
 80005f6:	f000 ff09 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MK_Input_3_Pin|MK_Input_2_Pin|MK_Input_1_Pin;
 80005fa:	232a      	movs	r3, #42	@ 0x2a
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4819      	ldr	r0, [pc, #100]	@ (8000674 <MX_GPIO_Init+0x198>)
 800060e:	f000 fefd 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000612:	2310      	movs	r3, #16
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4813      	ldr	r0, [pc, #76]	@ (8000678 <MX_GPIO_Init+0x19c>)
 800062a:	f000 feef 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800062e:	2310      	movs	r3, #16
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_GPIO_Init+0x1a0>)
 8000646:	f000 fee1 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800064a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <MX_GPIO_Init+0x1a4>)
 8000664:	f000 fed2 	bl	800140c <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	@ 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40021400 	.word	0x40021400
 8000678:	40020000 	.word	0x40020000
 800067c:	40020800 	.word	0x40020800
 8000680:	40021800 	.word	0x40021800

08000684 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C1_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C1_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006c2:	f001 f89b 	bl	80017fc <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 fab6 	bl	8000c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006d4:	f001 fede 	bl	8002494 <HAL_I2CEx_ConfigAnalogFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 faad 	bl	8000c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006e6:	f001 ff11 	bl	800250c <HAL_I2CEx_ConfigDigitalFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 faa4 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000094 	.word	0x20000094
 80006fc:	40005400 	.word	0x40005400
 8000700:	000186a0 	.word	0x000186a0

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	@ (8000788 <HAL_I2C_MspInit+0x84>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d12b      	bne.n	800077e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <HAL_I2C_MspInit+0x88>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000742:	23c0      	movs	r3, #192	@ 0xc0
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000746:	2312      	movs	r3, #18
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000752:	2304      	movs	r3, #4
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <HAL_I2C_MspInit+0x8c>)
 800075e:	f000 fe55 	bl	800140c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_I2C_MspInit+0x88>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	@ 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40005400 	.word	0x40005400
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400

08000794 <get_time>:
	set[6] = dec_to_bcd(y);

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set, 7, 1000);
}

void get_time() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
	uint8_t get[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get, 7, 1000);
 800079a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2307      	movs	r3, #7
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	463b      	mov	r3, r7
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	2200      	movs	r2, #0
 80007ac:	21d0      	movs	r1, #208	@ 0xd0
 80007ae:	481f      	ldr	r0, [pc, #124]	@ (800082c <get_time+0x98>)
 80007b0:	f001 f968 	bl	8001a84 <HAL_I2C_Mem_Read>
	time.second = bcd_to_dec(get[1]);
 80007b4:	787b      	ldrb	r3, [r7, #1]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f8d2 	bl	8000960 <bcd_to_dec>
 80007bc:	4603      	mov	r3, r0
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <get_time+0x9c>)
 80007c2:	701a      	strb	r2, [r3, #0]
	time.minute = bcd_to_dec(get[2]);
 80007c4:	78bb      	ldrb	r3, [r7, #2]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f8ca 	bl	8000960 <bcd_to_dec>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <get_time+0x9c>)
 80007d2:	705a      	strb	r2, [r3, #1]
	time.hour = bcd_to_dec(get[3]);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f8c2 	bl	8000960 <bcd_to_dec>
 80007dc:	4603      	mov	r3, r0
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <get_time+0x9c>)
 80007e2:	709a      	strb	r2, [r3, #2]
	time.day = bcd_to_dec(get[4]);
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f8ba 	bl	8000960 <bcd_to_dec>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <get_time+0x9c>)
 80007f2:	70da      	strb	r2, [r3, #3]
	time.week = bcd_to_dec(get[5]);
 80007f4:	797b      	ldrb	r3, [r7, #5]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f8b2 	bl	8000960 <bcd_to_dec>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <get_time+0x9c>)
 8000802:	711a      	strb	r2, [r3, #4]
	time.month = bcd_to_dec(get[6]);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f8aa 	bl	8000960 <bcd_to_dec>
 800080c:	4603      	mov	r3, r0
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <get_time+0x9c>)
 8000812:	715a      	strb	r2, [r3, #5]
	time.year = bcd_to_dec(get[7]);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f8a2 	bl	8000960 <bcd_to_dec>
 800081c:	4603      	mov	r3, r0
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <get_time+0x9c>)
 8000822:	719a      	strb	r2, [r3, #6]
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000094 	.word	0x20000094
 8000830:	200000f0 	.word	0x200000f0

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fbae 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f830 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f7ff fe4c 	bl	80004dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000844:	f000 fb04 	bl	8000e50 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000848:	f7ff ff1c 	bl	8000684 <MX_I2C1_Init>
  MX_SPI1_Init();
 800084c:	f000 f9fc 	bl	8000c48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // USART
  HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 8000850:	2204      	movs	r2, #4
 8000852:	490e      	ldr	r1, [pc, #56]	@ (800088c <main+0x58>)
 8000854:	480e      	ldr	r0, [pc, #56]	@ (8000890 <main+0x5c>)
 8000856:	f002 fd68 	bl	800332a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 1000);
 800085a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085e:	2264      	movs	r2, #100	@ 0x64
 8000860:	490c      	ldr	r1, [pc, #48]	@ (8000894 <main+0x60>)
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <main+0x5c>)
 8000864:	f002 fcd6 	bl	8003214 <HAL_UART_Transmit>
  //MFRC522_Init();
  //HAL_GPIO_WritePin(uSPI1_SS_GPIO_Port, uSPI1_SS_Pin, GPIO_PIN_SET);
  //HAL_SPI_Receive_IT(&hspi1, spi_RFID, sizeof(spi_RFID));

  // LED
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000868:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <main+0x64>)
 800086e:	f000 ffaa 	bl	80017c6 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (en_keypad == 1) {
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <main+0x68>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d101      	bne.n	800087e <main+0x4a>
	  keypad_read();
 800087a:	f000 f889 	bl	8000990 <keypad_read>
	}

	get_time();
 800087e:	f7ff ff89 	bl	8000794 <get_time>

	HAL_Delay(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000886:	f000 fbf9 	bl	800107c <HAL_Delay>
	if (en_keypad == 1) {
 800088a:	e7f2      	b.n	8000872 <main+0x3e>
 800088c:	200000e8 	.word	0x200000e8
 8000890:	20000150 	.word	0x20000150
 8000894:	20000000 	.word	0x20000000
 8000898:	40021800 	.word	0x40021800
 800089c:	200000ec 	.word	0x200000ec

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	@ 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2230      	movs	r2, #48	@ 0x30
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 fcb6 	bl	8004220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <SystemClock_Config+0xb8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <SystemClock_Config+0xb8>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d4:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <SystemClock_Config+0xb8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <SystemClock_Config+0xbc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008ec:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <SystemClock_Config+0xbc>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <SystemClock_Config+0xbc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fe39 	bl	800258c <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000920:	f000 f98c 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f002 f89c 	bl	8002a7c <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800094a:	f000 f977 	bl	8000c3c <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <bcd_to_dec>:

uint8_t dec_to_bcd(int value) {
	return (uint8_t)((value / 10 * 16) + (value % 10));
}

int bcd_to_dec(uint8_t value) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	return (int)((value / 16 * 10) + (value % 16));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	461a      	mov	r2, r3
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	4413      	add	r3, r2
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <keypad_read>:


void keypad_read() {
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b096      	sub	sp, #88	@ 0x58
 8000994:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, MK_Output_2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2104      	movs	r1, #4
 800099a:	4842      	ldr	r0, [pc, #264]	@ (8000aa4 <keypad_read+0x114>)
 800099c:	f000 fefa 	bl	8001794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, MK_Output_3_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	483f      	ldr	r0, [pc, #252]	@ (8000aa4 <keypad_read+0x114>)
 80009a6:	f000 fef5 	bl	8001794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, MK_Output_1_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <keypad_read+0x114>)
 80009b0:	f000 fef0 	bl	8001794 <HAL_GPIO_WritePin>

	uint8_t pin[1] = "e";
 80009b4:	2365      	movs	r3, #101	@ 0x65
 80009b6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_1_Pin) == GPIO_PIN_SET)
 80009ba:	2120      	movs	r1, #32
 80009bc:	4839      	ldr	r0, [pc, #228]	@ (8000aa4 <keypad_read+0x114>)
 80009be:	f000 fed1 	bl	8001764 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d103      	bne.n	80009d0 <keypad_read+0x40>
	{
		pin[0] = '1';
 80009c8:	2331      	movs	r3, #49	@ 0x31
 80009ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80009ce:	e020      	b.n	8000a12 <keypad_read+0x82>
	} else
	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_2_Pin) == GPIO_PIN_SET)
 80009d0:	2108      	movs	r1, #8
 80009d2:	4834      	ldr	r0, [pc, #208]	@ (8000aa4 <keypad_read+0x114>)
 80009d4:	f000 fec6 	bl	8001764 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d103      	bne.n	80009e6 <keypad_read+0x56>
	{
		pin[0] = '4';
 80009de:	2334      	movs	r3, #52	@ 0x34
 80009e0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80009e4:	e015      	b.n	8000a12 <keypad_read+0x82>

	} else
	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_3_Pin) == GPIO_PIN_SET)
 80009e6:	2102      	movs	r1, #2
 80009e8:	482e      	ldr	r0, [pc, #184]	@ (8000aa4 <keypad_read+0x114>)
 80009ea:	f000 febb 	bl	8001764 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d103      	bne.n	80009fc <keypad_read+0x6c>
	{
		pin[0] = '7';
 80009f4:	2337      	movs	r3, #55	@ 0x37
 80009f6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80009fa:	e00a      	b.n	8000a12 <keypad_read+0x82>
	} else
	if (HAL_GPIO_ReadPin(MK_Input_4_GPIO_Port, MK_Input_4_Pin) == GPIO_PIN_SET)
 80009fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a00:	4829      	ldr	r0, [pc, #164]	@ (8000aa8 <keypad_read+0x118>)
 8000a02:	f000 feaf 	bl	8001764 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d102      	bne.n	8000a12 <keypad_read+0x82>
	{
		pin[0] = '*';
 8000a0c:	232a      	movs	r3, #42	@ 0x2a
 8000a0e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	}

	if (pin[0] != 'e' && pin[0] != last_pin[0]) {
 8000a12:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000a16:	2b65      	cmp	r3, #101	@ 0x65
 8000a18:	d03a      	beq.n	8000a90 <keypad_read+0x100>
 8000a1a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8000a1e:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <keypad_read+0x11c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d034      	beq.n	8000a90 <keypad_read+0x100>
		last_pin[0] = pin[0];
 8000a26:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <keypad_read+0x11c>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		uint8_t message[40] = ESCAPE_YELLOW "PIN: - " ESCAPE_WHITE;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <keypad_read+0x120>)
 8000a30:	1d3c      	adds	r4, r7, #4
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	8023      	strh	r3, [r4, #0]
 8000a3c:	f107 0316 	add.w	r3, r7, #22
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	829a      	strh	r2, [r3, #20]
		uint8_t messageEnd[40] = "\n\r";
 8000a4e:	f640 530a 	movw	r3, #3338	@ 0xd0a
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a58:	2224      	movs	r2, #36	@ 0x24
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fbdf 	bl	8004220 <memset>
		HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8000a62:	1d39      	adds	r1, r7, #4
 8000a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a68:	2228      	movs	r2, #40	@ 0x28
 8000a6a:	4812      	ldr	r0, [pc, #72]	@ (8000ab4 <keypad_read+0x124>)
 8000a6c:	f002 fbd2 	bl	8003214 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, pin, sizeof(pin), 1000);
 8000a70:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a78:	2201      	movs	r2, #1
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <keypad_read+0x124>)
 8000a7c:	f002 fbca 	bl	8003214 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, messageEnd, sizeof(messageEnd), 1000);
 8000a80:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000a84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a88:	2228      	movs	r2, #40	@ 0x28
 8000a8a:	480a      	ldr	r0, [pc, #40]	@ (8000ab4 <keypad_read+0x124>)
 8000a8c:	f002 fbc2 	bl	8003214 <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(GPIOF, MK_Output_1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <keypad_read+0x114>)
 8000a96:	f000 fe7d 	bl	8001794 <HAL_GPIO_WritePin>
	return;
 8000a9a:	bf00      	nop
}
 8000a9c:	3758      	adds	r7, #88	@ 0x58
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	20000064 	.word	0x20000064
 8000ab0:	08004290 	.word	0x08004290
 8000ab4:	20000150 	.word	0x20000150

08000ab8 <toggleLED>:

void toggleLED() {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000abc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <toggleLED+0x1c>)
 8000ac2:	f000 fe80 	bl	80017c6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <toggleLED+0x1c>)
 8000acc:	f000 fe7b 	bl	80017c6 <HAL_GPIO_TogglePin>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021800 	.word	0x40021800

08000ad8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b0a0      	sub	sp, #128	@ 0x80
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	//COM
	HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	494e      	ldr	r1, [pc, #312]	@ (8000c1c <HAL_UART_RxCpltCallback+0x144>)
 8000ae4:	484e      	ldr	r0, [pc, #312]	@ (8000c20 <HAL_UART_RxCpltCallback+0x148>)
 8000ae6:	f002 fc20 	bl	800332a <HAL_UART_Receive_IT>
	//HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 1000);

	uint8_t message[40] = ESCAPE_YELLOW "Interrupt - COM - " ESCAPE_WHITE __TIME__ "\n\r";
 8000aea:	4b4e      	ldr	r3, [pc, #312]	@ (8000c24 <HAL_UART_RxCpltCallback+0x14c>)
 8000aec:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000af0:	461d      	mov	r5, r3
 8000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000afe:	6020      	str	r0, [r4, #0]
 8000b00:	3404      	adds	r4, #4
 8000b02:	8021      	strh	r1, [r4, #0]
 8000b04:	3402      	adds	r4, #2
 8000b06:	0c0b      	lsrs	r3, r1, #16
 8000b08:	7023      	strb	r3, [r4, #0]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8000b10:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b18:	2228      	movs	r2, #40	@ 0x28
 8000b1a:	4841      	ldr	r0, [pc, #260]	@ (8000c20 <HAL_UART_RxCpltCallback+0x148>)
 8000b1c:	f002 fb7a 	bl	8003214 <HAL_UART_Transmit>

	int en_keypad_code = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for (int i = 0; i < 4; i++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000b28:	e00a      	b.n	8000b40 <HAL_UART_RxCpltCallback+0x68>
		if (rx_data[i] != '0') {
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c1c <HAL_UART_RxCpltCallback+0x144>)
 8000b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b30      	cmp	r3, #48	@ 0x30
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_RxCpltCallback+0x62>
			en_keypad_code = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for (int i = 0; i < 4; i++) {
 8000b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	ddf1      	ble.n	8000b2a <HAL_UART_RxCpltCallback+0x52>
		}
	}
	if (en_keypad_code == 1) {
 8000b46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d11b      	bne.n	8000b84 <HAL_UART_RxCpltCallback+0xac>
		if (en_keypad == 1) {
 8000b4c:	4b36      	ldr	r3, [pc, #216]	@ (8000c28 <HAL_UART_RxCpltCallback+0x150>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d103      	bne.n	8000b5c <HAL_UART_RxCpltCallback+0x84>
			en_keypad = 0;
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <HAL_UART_RxCpltCallback+0x150>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e002      	b.n	8000b62 <HAL_UART_RxCpltCallback+0x8a>
		}
		else en_keypad = 1;
 8000b5c:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <HAL_UART_RxCpltCallback+0x150>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
		uint8_t response[20] = ESCAPE_GREEN "Keypad toggled\n\r";
 8000b62:	4b32      	ldr	r3, [pc, #200]	@ (8000c2c <HAL_UART_RxCpltCallback+0x154>)
 8000b64:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000b68:	461d      	mov	r5, r3
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, response, sizeof(response), 1000);
 8000b72:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7a:	2214      	movs	r2, #20
 8000b7c:	4828      	ldr	r0, [pc, #160]	@ (8000c20 <HAL_UART_RxCpltCallback+0x148>)
 8000b7e:	f002 fb49 	bl	8003214 <HAL_UART_Transmit>
 8000b82:	e047      	b.n	8000c14 <HAL_UART_RxCpltCallback+0x13c>
		return;
	}

	int correctCode = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	677b      	str	r3, [r7, #116]	@ 0x74
	for (int i = 0; i < 4; i++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b8c:	e00e      	b.n	8000bac <HAL_UART_RxCpltCallback+0xd4>
		if (rx_data[i] != code[i]) {
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <HAL_UART_RxCpltCallback+0x144>)
 8000b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b92:	4413      	add	r3, r2
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4926      	ldr	r1, [pc, #152]	@ (8000c30 <HAL_UART_RxCpltCallback+0x158>)
 8000b98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b9a:	440b      	add	r3, r1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_RxCpltCallback+0xce>
			correctCode = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	677b      	str	r3, [r7, #116]	@ 0x74
	for (int i = 0; i < 4; i++) {
 8000ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ba8:	3301      	adds	r3, #1
 8000baa:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	dded      	ble.n	8000b8e <HAL_UART_RxCpltCallback+0xb6>
		}
	}

	if (correctCode == 1) {
 8000bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d118      	bne.n	8000bea <HAL_UART_RxCpltCallback+0x112>
		uint8_t response[20] = ESCAPE_GREEN "Correct\n\r";
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <HAL_UART_RxCpltCallback+0x15c>)
 8000bba:	f107 0420 	add.w	r4, r7, #32
 8000bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc0:	c407      	stmia	r4!, {r0, r1, r2}
 8000bc2:	8023      	strh	r3, [r4, #0]
 8000bc4:	3402      	adds	r4, #2
 8000bc6:	0c1b      	lsrs	r3, r3, #16
 8000bc8:	7023      	strb	r3, [r4, #0]
 8000bca:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1, response, sizeof(response), 1000);
 8000bd4:	f107 0120 	add.w	r1, r7, #32
 8000bd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bdc:	2214      	movs	r2, #20
 8000bde:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <HAL_UART_RxCpltCallback+0x148>)
 8000be0:	f002 fb18 	bl	8003214 <HAL_UART_Transmit>
		toggleLED();
 8000be4:	f7ff ff68 	bl	8000ab8 <toggleLED>
 8000be8:	e014      	b.n	8000c14 <HAL_UART_RxCpltCallback+0x13c>
	} else {
		uint8_t response[20] = ESCAPE_RED "Incorrect\n\r";
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_UART_RxCpltCallback+0x160>)
 8000bec:	f107 040c 	add.w	r4, r7, #12
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	682b      	ldr	r3, [r5, #0]
 8000bf8:	7023      	strb	r3, [r4, #0]
 8000bfa:	f107 031d 	add.w	r3, r7, #29
 8000bfe:	2200      	movs	r2, #0
 8000c00:	801a      	strh	r2, [r3, #0]
 8000c02:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, response, sizeof(response), 1000);
 8000c04:	f107 010c 	add.w	r1, r7, #12
 8000c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0c:	2214      	movs	r2, #20
 8000c0e:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <HAL_UART_RxCpltCallback+0x148>)
 8000c10:	f002 fb00 	bl	8003214 <HAL_UART_Transmit>

	}
}
 8000c14:	3780      	adds	r7, #128	@ 0x80
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000e8 	.word	0x200000e8
 8000c20:	20000150 	.word	0x20000150
 8000c24:	080042b8 	.word	0x080042b8
 8000c28:	200000ec 	.word	0x200000ec
 8000c2c:	080042e0 	.word	0x080042e0
 8000c30:	20000068 	.word	0x20000068
 8000c34:	080042f4 	.word	0x080042f4
 8000c38:	08004308 	.word	0x08004308

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c4e:	4a18      	ldr	r2, [pc, #96]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c94:	220a      	movs	r2, #10
 8000c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_SPI1_Init+0x64>)
 8000c9a:	f002 f8cf 	bl	8002e3c <HAL_SPI_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca4:	f7ff ffca 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000f8 	.word	0x200000f8
 8000cb0:	40013000 	.word	0x40013000

08000cb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_SPI_MspInit+0x94>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d133      	bne.n	8000d3e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_SPI_MspInit+0x98>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_SPI_MspInit+0x98>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_SPI_MspInit+0x98>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_SPI_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <HAL_SPI_MspInit+0x98>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_SPI_MspInit+0x98>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23e0      	movs	r3, #224	@ 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <HAL_SPI_MspInit+0x9c>)
 8000d2a:	f000 fb6f 	bl	800140c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2023      	movs	r0, #35	@ 0x23
 8000d34:	f000 faa1 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d38:	2023      	movs	r0, #35	@ 0x23
 8000d3a:	f000 faba 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40013000 	.word	0x40013000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f91f 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <SPI1_IRQHandler+0x10>)
 8000e0a:	f002 f8a1 	bl	8002f50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000f8 	.word	0x200000f8

08000e18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <USART1_IRQHandler+0x10>)
 8000e1e:	f002 faa9 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000150 	.word	0x20000150

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <MX_USART1_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e88:	f002 f974 	bl	8003174 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f7ff fed3 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000150 	.word	0x20000150
 8000ea0:	40011000 	.word	0x40011000

08000ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	@ 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f38 <HAL_UART_MspInit+0x94>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d134      	bne.n	8000f30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_UART_MspInit+0x98>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <HAL_UART_MspInit+0x98>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed6:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_UART_MspInit+0x98>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <HAL_UART_MspInit+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <HAL_UART_MspInit+0x98>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_UART_MspInit+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000efe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f10:	2307      	movs	r3, #7
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <HAL_UART_MspInit+0x9c>)
 8000f1c:	f000 fa76 	bl	800140c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2025      	movs	r0, #37	@ 0x25
 8000f26:	f000 f9a8 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2a:	2025      	movs	r0, #37	@ 0x25
 8000f2c:	f000 f9c1 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f48:	f7ff ff70 	bl	8000e2c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f003 f95d 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fc5d 	bl	8000834 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f88:	0800436c 	.word	0x0800436c
  ldr r2, =_sbss
 8000f8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f90:	2000019c 	.word	0x2000019c

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f94f 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fec2 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f967 	bl	80012ce <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f92f 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000006c 	.word	0x2000006c
 8001034:	20000074 	.word	0x20000074
 8001038:	20000070 	.word	0x20000070

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000074 	.word	0x20000074
 8001060:	20000198 	.word	0x20000198

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000198 	.word	0x20000198

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000074 	.word	0x20000074

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff3e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff feb6 	bl	8001064 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d008      	beq.n	8001318 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e052      	b.n	80013be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0216 	bic.w	r2, r2, #22
 8001326:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001336:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	2b00      	cmp	r3, #0
 800133e:	d103      	bne.n	8001348 <HAL_DMA_Abort+0x62>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0208 	bic.w	r2, r2, #8
 8001356:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001368:	e013      	b.n	8001392 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136a:	f7ff fe7b 	bl	8001064 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b05      	cmp	r3, #5
 8001376:	d90c      	bls.n	8001392 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2220      	movs	r2, #32
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2203      	movs	r2, #3
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e015      	b.n	80013be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e4      	bne.n	800136a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a4:	223f      	movs	r2, #63	@ 0x3f
 80013a6:	409a      	lsls	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d004      	beq.n	80013e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e00c      	b.n	80013fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2205      	movs	r2, #5
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e177      	b.n	8001718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8166 	bne.w	8001712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80c0 	beq.w	8001712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <HAL_GPIO_Init+0x324>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	4a65      	ldr	r2, [pc, #404]	@ (8001730 <HAL_GPIO_Init+0x324>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a2:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ae:	4a61      	ldr	r2, [pc, #388]	@ (8001734 <HAL_GPIO_Init+0x328>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <HAL_GPIO_Init+0x32c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d037      	beq.n	800164a <HAL_GPIO_Init+0x23e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a57      	ldr	r2, [pc, #348]	@ (800173c <HAL_GPIO_Init+0x330>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d031      	beq.n	8001646 <HAL_GPIO_Init+0x23a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a56      	ldr	r2, [pc, #344]	@ (8001740 <HAL_GPIO_Init+0x334>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d02b      	beq.n	8001642 <HAL_GPIO_Init+0x236>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a55      	ldr	r2, [pc, #340]	@ (8001744 <HAL_GPIO_Init+0x338>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d025      	beq.n	800163e <HAL_GPIO_Init+0x232>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a54      	ldr	r2, [pc, #336]	@ (8001748 <HAL_GPIO_Init+0x33c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01f      	beq.n	800163a <HAL_GPIO_Init+0x22e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a53      	ldr	r2, [pc, #332]	@ (800174c <HAL_GPIO_Init+0x340>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x22a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_GPIO_Init+0x344>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x226>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a51      	ldr	r2, [pc, #324]	@ (8001754 <HAL_GPIO_Init+0x348>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x222>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a50      	ldr	r2, [pc, #320]	@ (8001758 <HAL_GPIO_Init+0x34c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x21e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <HAL_GPIO_Init+0x350>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x21a>
 8001622:	2309      	movs	r3, #9
 8001624:	e012      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001626:	230a      	movs	r3, #10
 8001628:	e010      	b.n	800164c <HAL_GPIO_Init+0x240>
 800162a:	2308      	movs	r3, #8
 800162c:	e00e      	b.n	800164c <HAL_GPIO_Init+0x240>
 800162e:	2307      	movs	r3, #7
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001632:	2306      	movs	r3, #6
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x240>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x240>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x240>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	@ (8001734 <HAL_GPIO_Init+0x328>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <HAL_GPIO_Init+0x354>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a34      	ldr	r2, [pc, #208]	@ (8001760 <HAL_GPIO_Init+0x354>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <HAL_GPIO_Init+0x354>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a29      	ldr	r2, [pc, #164]	@ (8001760 <HAL_GPIO_Init+0x354>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016be:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <HAL_GPIO_Init+0x354>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001760 <HAL_GPIO_Init+0x354>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <HAL_GPIO_Init+0x354>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <HAL_GPIO_Init+0x354>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae84 	bls.w	8001428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40021c00 	.word	0x40021c00
 8001758:	40022000 	.word	0x40022000
 800175c:	40022400 	.word	0x40022400
 8001760:	40013c00 	.word	0x40013c00

08001764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e001      	b.n	8001786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	041a      	lsls	r2, r3, #16
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	400b      	ands	r3, r1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e12b      	b.n	8001a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe ff6e 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2224      	movs	r2, #36	@ 0x24
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800184e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800185e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001860:	f001 fac4 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a81      	ldr	r2, [pc, #516]	@ (8001a70 <HAL_I2C_Init+0x274>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d807      	bhi.n	8001880 <HAL_I2C_Init+0x84>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a80      	ldr	r2, [pc, #512]	@ (8001a74 <HAL_I2C_Init+0x278>)
 8001874:	4293      	cmp	r3, r2
 8001876:	bf94      	ite	ls
 8001878:	2301      	movls	r3, #1
 800187a:	2300      	movhi	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e006      	b.n	800188e <HAL_I2C_Init+0x92>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a7d      	ldr	r2, [pc, #500]	@ (8001a78 <HAL_I2C_Init+0x27c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	bf94      	ite	ls
 8001888:	2301      	movls	r3, #1
 800188a:	2300      	movhi	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0e7      	b.n	8001a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a78      	ldr	r2, [pc, #480]	@ (8001a7c <HAL_I2C_Init+0x280>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a70 <HAL_I2C_Init+0x274>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d802      	bhi.n	80018d0 <HAL_I2C_Init+0xd4>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	e009      	b.n	80018e4 <HAL_I2C_Init+0xe8>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	4a69      	ldr	r2, [pc, #420]	@ (8001a80 <HAL_I2C_Init+0x284>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	3301      	adds	r3, #1
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	495c      	ldr	r1, [pc, #368]	@ (8001a70 <HAL_I2C_Init+0x274>)
 8001900:	428b      	cmp	r3, r1
 8001902:	d819      	bhi.n	8001938 <HAL_I2C_Init+0x13c>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e59      	subs	r1, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001912:	1c59      	adds	r1, r3, #1
 8001914:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001918:	400b      	ands	r3, r1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_I2C_Init+0x138>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1e59      	subs	r1, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fbb1 f3f3 	udiv	r3, r1, r3
 800192c:	3301      	adds	r3, #1
 800192e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001932:	e051      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 8001934:	2304      	movs	r3, #4
 8001936:	e04f      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d111      	bne.n	8001964 <HAL_I2C_Init+0x168>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e58      	subs	r0, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e012      	b.n	800198a <HAL_I2C_Init+0x18e>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1e58      	subs	r0, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	0099      	lsls	r1, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	fbb0 f3f3 	udiv	r3, r0, r3
 800197a:	3301      	adds	r3, #1
 800197c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x196>
 800198e:	2301      	movs	r3, #1
 8001990:	e022      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10e      	bne.n	80019b8 <HAL_I2C_Init+0x1bc>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e58      	subs	r0, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	440b      	add	r3, r1
 80019a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019b6:	e00f      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	0099      	lsls	r1, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	6809      	ldr	r1, [r1, #0]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6911      	ldr	r1, [r2, #16]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68d2      	ldr	r2, [r2, #12]
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	000186a0 	.word	0x000186a0
 8001a74:	001e847f 	.word	0x001e847f
 8001a78:	003d08ff 	.word	0x003d08ff
 8001a7c:	431bde83 	.word	0x431bde83
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	@ 0x30
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	4611      	mov	r1, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	817b      	strh	r3, [r7, #10]
 8001a96:	460b      	mov	r3, r1
 8001a98:	813b      	strh	r3, [r7, #8]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9e:	f7ff fae1 	bl	8001064 <HAL_GetTick>
 8001aa2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	f040 8214 	bne.w	8001eda <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2319      	movs	r3, #25
 8001ab8:	2201      	movs	r2, #1
 8001aba:	497b      	ldr	r1, [pc, #492]	@ (8001ca8 <HAL_I2C_Mem_Read+0x224>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fafb 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e207      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Mem_Read+0x56>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e200      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d007      	beq.n	8001b00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2222      	movs	r2, #34	@ 0x22
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2240      	movs	r2, #64	@ 0x40
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cac <HAL_I2C_Mem_Read+0x228>)
 8001b40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b42:	88f8      	ldrh	r0, [r7, #6]
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	8979      	ldrh	r1, [r7, #10]
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4603      	mov	r3, r0
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f9c8 	bl	8001ee8 <I2C_RequestMemoryRead>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1bc      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d113      	bne.n	8001b92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	623b      	str	r3, [r7, #32]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	623b      	str	r3, [r7, #32]
 8001b7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e190      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d11b      	bne.n	8001bd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e170      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d11b      	bne.n	8001c12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001be8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	e150      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c28:	e144      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	f200 80f1 	bhi.w	8001e16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d123      	bne.n	8001c84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fb9b 	bl	800237c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e145      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c82:	e117      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d14e      	bne.n	8001d2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c92:	2200      	movs	r2, #0
 8001c94:	4906      	ldr	r1, [pc, #24]	@ (8001cb0 <HAL_I2C_Mem_Read+0x22c>)
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fa0e 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e11a      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
 8001ca6:	bf00      	nop
 8001ca8:	00100002 	.word	0x00100002
 8001cac:	ffff0000 	.word	0xffff0000
 8001cb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d28:	e0c4      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d30:	2200      	movs	r2, #0
 8001d32:	496c      	ldr	r1, [pc, #432]	@ (8001ee4 <HAL_I2C_Mem_Read+0x460>)
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f9bf 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0cb      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4955      	ldr	r1, [pc, #340]	@ (8001ee4 <HAL_I2C_Mem_Read+0x460>)
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f991 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e09d      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e14:	e04e      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 faae 	bl	800237c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e058      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d124      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f47f aeb6 	bne.w	8001c2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3728      	adds	r7, #40	@ 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	00010004 	.word	0x00010004

08001ee8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	817b      	strh	r3, [r7, #10]
 8001efa:	460b      	mov	r3, r1
 8001efc:	813b      	strh	r3, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f8c2 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f48:	d103      	bne.n	8001f52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0aa      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	4952      	ldr	r1, [pc, #328]	@ (80020b4 <I2C_RequestMemoryRead+0x1cc>)
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f91d 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e097      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f9a8 	bl	80022ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d107      	bne.n	8001fba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e076      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e021      	b.n	8002014 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fd0:	893b      	ldrh	r3, [r7, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f982 	bl	80022ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d107      	bne.n	8002006 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e050      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800200a:	893b      	ldrh	r3, [r7, #8]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002016:	6a39      	ldr	r1, [r7, #32]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f967 	bl	80022ec <I2C_WaitOnTXEFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e035      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800204e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	2200      	movs	r2, #0
 8002058:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f82b 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002076:	d103      	bne.n	8002080 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e013      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	6a3a      	ldr	r2, [r7, #32]
 8002098:	4906      	ldr	r1, [pc, #24]	@ (80020b4 <I2C_RequestMemoryRead+0x1cc>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f886 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00010002 	.word	0x00010002

080020b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c8:	e048      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d044      	beq.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d2:	f7fe ffc7 	bl	8001064 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d302      	bcc.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d139      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10d      	bne.n	800210e <I2C_WaitOnFlagUntilTimeout+0x56>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	e00c      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0x70>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	43da      	mvns	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d116      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e023      	b.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10d      	bne.n	8002182 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	43da      	mvns	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4013      	ands	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	e00c      	b.n	800219c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d093      	beq.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ba:	e071      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d123      	bne.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e067      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d041      	beq.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7fe ff22 	bl	8001064 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d136      	bne.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10c      	bne.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4013      	ands	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	e00b      	b.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	43da      	mvns	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e021      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10c      	bne.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e00b      	b.n	80022dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af6d 	bne.w	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f8:	e034      	b.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f89b 	bl	8002436 <I2C_IsAcknowledgeFailed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e034      	b.n	8002374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d028      	beq.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe fea7 	bl	8001064 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11d      	bne.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002332:	2b80      	cmp	r3, #128	@ 0x80
 8002334:	d016      	beq.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236e:	2b80      	cmp	r3, #128	@ 0x80
 8002370:	d1c3      	bne.n	80022fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002388:	e049      	b.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b10      	cmp	r3, #16
 8002396:	d119      	bne.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0210 	mvn.w	r2, #16
 80023a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e030      	b.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023cc:	f7fe fe4a 	bl	8001064 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d302      	bcc.n	80023e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11d      	bne.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ec:	2b40      	cmp	r3, #64	@ 0x40
 80023ee:	d016      	beq.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e007      	b.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002428:	2b40      	cmp	r3, #64	@ 0x40
 800242a:	d1ae      	bne.n	800238a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244c:	d11b      	bne.n	8002486 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002456:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f043 0204 	orr.w	r2, r3, #4
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d129      	bne.n	80024fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2224      	movs	r2, #36	@ 0x24
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0210 	bic.w	r2, r2, #16
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	d12a      	bne.n	800257c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2224      	movs	r2, #36	@ 0x24
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	f023 030f 	bic.w	r3, r3, #15
 800254c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b29a      	uxth	r2, r3
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	4313      	orrs	r3, r2
 8002556:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	89fa      	ldrh	r2, [r7, #14]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e267      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d075      	beq.n	8002696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	4b88      	ldr	r3, [pc, #544]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d00c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4b85      	ldr	r3, [pc, #532]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b82      	ldr	r3, [pc, #520]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ce:	d10b      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	4b7e      	ldr	r3, [pc, #504]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05b      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d157      	bne.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e242      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x74>
 80025f2:	4b76      	ldr	r3, [pc, #472]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x98>
 800260a:	4b70      	ldr	r3, [pc, #448]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6f      	ldr	r2, [pc, #444]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b6d      	ldr	r3, [pc, #436]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6c      	ldr	r2, [pc, #432]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002624:	4b69      	ldr	r3, [pc, #420]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a68      	ldr	r2, [pc, #416]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b66      	ldr	r3, [pc, #408]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a65      	ldr	r2, [pc, #404]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fd0e 	bl	8001064 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fd0a 	bl	8001064 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e207      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b5b      	ldr	r3, [pc, #364]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xc0>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fcfa 	bl	8001064 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fcf6 	bl	8001064 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1f3      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	4b51      	ldr	r3, [pc, #324]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	4b4a      	ldr	r3, [pc, #296]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b47      	ldr	r3, [pc, #284]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	4b41      	ldr	r3, [pc, #260]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1c7      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b3b      	ldr	r3, [pc, #236]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4937      	ldr	r1, [pc, #220]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	e03a      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b34      	ldr	r3, [pc, #208]	@ (80027d0 <HAL_RCC_OscConfig+0x244>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fcaf 	bl	8001064 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe fcab 	bl	8001064 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1a8      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4925      	ldr	r1, [pc, #148]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <HAL_RCC_OscConfig+0x244>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fc8e 	bl	8001064 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fc8a 	bl	8001064 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e187      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d036      	beq.n	80027e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCC_OscConfig+0x248>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fc6e 	bl	8001064 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fc6a 	bl	8001064 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e167      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_RCC_OscConfig+0x240>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x200>
 80027aa:	e01b      	b.n	80027e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_OscConfig+0x248>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fc57 	bl	8001064 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e00e      	b.n	80027d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe fc53 	bl	8001064 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d907      	bls.n	80027d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e150      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ea      	bne.n	80027ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8097 	beq.w	8002920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b81      	ldr	r3, [pc, #516]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b7d      	ldr	r3, [pc, #500]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4a7c      	ldr	r2, [pc, #496]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	@ 0x40
 8002812:	4b7a      	ldr	r3, [pc, #488]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	4b77      	ldr	r3, [pc, #476]	@ (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282e:	4b74      	ldr	r3, [pc, #464]	@ (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a73      	ldr	r2, [pc, #460]	@ (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe fc13 	bl	8001064 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe fc0f 	bl	8001064 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e10c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b6a      	ldr	r3, [pc, #424]	@ (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x2ea>
 8002868:	4b64      	ldr	r3, [pc, #400]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a63      	ldr	r2, [pc, #396]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x324>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x30c>
 800287e:	4b5f      	ldr	r3, [pc, #380]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002882:	4a5e      	ldr	r2, [pc, #376]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6713      	str	r3, [r2, #112]	@ 0x70
 800288a:	4b5c      	ldr	r3, [pc, #368]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288e:	4a5b      	ldr	r2, [pc, #364]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	@ 0x70
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x324>
 8002898:	4b58      	ldr	r3, [pc, #352]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	4a57      	ldr	r2, [pc, #348]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a4:	4b55      	ldr	r3, [pc, #340]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a54      	ldr	r2, [pc, #336]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe fbd4 	bl	8001064 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fbd0 	bl	8001064 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0cb      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <HAL_RCC_OscConfig+0x334>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe fbbe 	bl	8001064 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe fbba 	bl	8001064 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0b5      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	4b3e      	ldr	r3, [pc, #248]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ee      	bne.n	80028ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b39      	ldr	r3, [pc, #228]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	4a38      	ldr	r2, [pc, #224]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a1 	beq.w	8002a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	d05c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d141      	bne.n	80029c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fb8e 	bl	8001064 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fb8a 	bl	8001064 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e087      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	491b      	ldr	r1, [pc, #108]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCC_OscConfig+0x478>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fb63 	bl	8001064 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fb5f 	bl	8001064 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e05c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x416>
 80029c0:	e054      	b.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <HAL_RCC_OscConfig+0x478>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fb4c 	bl	8001064 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fb48 	bl	8001064 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e045      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_OscConfig+0x470>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x444>
 80029ee:	e03d      	b.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e038      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x4ec>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d028      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d121      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d11a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cc      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b68      	ldr	r3, [pc, #416]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d044      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e067      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b37      	ldr	r3, [pc, #220]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4934      	ldr	r1, [pc, #208]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fa7a 	bl	8001064 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe fa76 	bl	8001064 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d20c      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f821 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	490a      	ldr	r1, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f9da 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08004344 	.word	0x08004344
 8002c40:	2000006c 	.word	0x2000006c
 8002c44:	20000070 	.word	0x20000070

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c4c:	b090      	sub	sp, #64	@ 0x40
 8002c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c54:	2300      	movs	r3, #0
 8002c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c58:	2300      	movs	r3, #0
 8002c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c60:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x40>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	f200 80a1 	bhi.w	8002db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x34>
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7a:	e09b      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c80:	e09b      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c82:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c86:	e098      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c92:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb4:	fb03 f201 	mul.w	r2, r3, r1
 8002cb8:	2300      	movs	r3, #0
 8002cba:	fb00 f303 	mul.w	r3, r0, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a43      	ldr	r2, [pc, #268]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cc8:	460a      	mov	r2, r1
 8002cca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cce:	4413      	add	r3, r2
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	61fa      	str	r2, [r7, #28]
 8002cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ce2:	f7fd fa83 	bl	80001ec <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4613      	mov	r3, r2
 8002cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cee:	e053      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf0:	4b35      	ldr	r3, [pc, #212]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	617a      	str	r2, [r7, #20]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d02:	f04f 0b00 	mov.w	fp, #0
 8002d06:	4652      	mov	r2, sl
 8002d08:	465b      	mov	r3, fp
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	0159      	lsls	r1, r3, #5
 8002d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d18:	0150      	lsls	r0, r2, #5
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d22:	eb63 090b 	sbc.w	r9, r3, fp
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	00eb      	lsls	r3, r5, #3
 8002d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d50:	00e2      	lsls	r2, r4, #3
 8002d52:	4614      	mov	r4, r2
 8002d54:	461d      	mov	r5, r3
 8002d56:	eb14 030a 	adds.w	r3, r4, sl
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	eb45 030b 	adc.w	r3, r5, fp
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6e:	4629      	mov	r1, r5
 8002d70:	028b      	lsls	r3, r1, #10
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d78:	4621      	mov	r1, r4
 8002d7a:	028a      	lsls	r2, r1, #10
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	2200      	movs	r2, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	60fa      	str	r2, [r7, #12]
 8002d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8c:	f7fd fa2e 	bl	80001ec <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002da8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db2:	e002      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002db6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3740      	adds	r7, #64	@ 0x40
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	017d7840 	.word	0x017d7840

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000006c 	.word	0x2000006c

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0a9b      	lsrs	r3, r3, #10
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	08004354 	.word	0x08004354

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffdc 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0b5b      	lsrs	r3, r3, #13
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	@ (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	08004354 	.word	0x08004354

08002e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07b      	b.n	8002f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e5e:	d009      	beq.n	8002e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
 8002e66:	e005      	b.n	8002e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd ff10 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	ea42 0103 	orr.w	r1, r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0104 	and.w	r1, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	f003 0210 	and.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    return;
 8002f8e:	e0ce      	b.n	800312e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_SPI_IRQHandler+0x5e>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
    return;
 8002fac:	e0bf      	b.n	800312e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <HAL_SPI_IRQHandler+0x7e>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80b0 	beq.w	800312e <HAL_SPI_IRQHandler+0x1de>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80aa 	beq.w	800312e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d023      	beq.n	800302c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d011      	beq.n	8003014 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	e00b      	b.n	800302c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
        return;
 800302a:	e080      	b.n	800312e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d014      	beq.n	8003060 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f043 0208 	orr.w	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	2b00      	cmp	r3, #0
 800308a:	d04f      	beq.n	800312c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800309a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <HAL_SPI_IRQHandler+0x168>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d034      	beq.n	8003122 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0203 	bic.w	r2, r2, #3
 80030c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_SPI_IRQHandler+0x1e4>)
 80030d6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe f972 	bl	80013c6 <HAL_DMA_Abort_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d016      	beq.n	800312a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003100:	4a0c      	ldr	r2, [pc, #48]	@ (8003134 <HAL_SPI_IRQHandler+0x1e4>)
 8003102:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe f95c 	bl	80013c6 <HAL_DMA_Abort_IT>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003120:	e003      	b.n	800312a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f808 	bl	8003138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003128:	e000      	b.n	800312c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800312a:	bf00      	nop
    return;
 800312c:	bf00      	nop
  }
}
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800314d 	.word	0x0800314d

08003138 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff ffe6 	bl	8003138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e042      	b.n	800320c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fe82 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	@ 0x24
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fdbd 	bl	8003d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b20      	cmp	r3, #32
 8003232:	d175      	bne.n	8003320 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Transmit+0x2c>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e06e      	b.n	8003322 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2221      	movs	r2, #33	@ 0x21
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003252:	f7fd ff07 	bl	8001064 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326c:	d108      	bne.n	8003280 <HAL_UART_Transmit+0x6c>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e003      	b.n	8003288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003288:	e02e      	b.n	80032e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	@ 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb1f 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03a      	b.n	8003322 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3302      	adds	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e007      	b.n	80032da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1cb      	bne.n	800328a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	@ 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 faeb 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e006      	b.n	8003322 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	4613      	mov	r3, r2
 8003336:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b20      	cmp	r3, #32
 8003342:	d112      	bne.n	800336a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_Receive_IT+0x26>
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00b      	b.n	800336c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	461a      	mov	r2, r3
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fb12 	bl	800398a <UART_Start_Receive_IT>
 8003366:	4603      	mov	r3, r0
 8003368:	e000      	b.n	800336c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b0ba      	sub	sp, #232	@ 0xe8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80033b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_UART_IRQHandler+0x66>
 80033c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fbf2 	bl	8003bbc <UART_Receive_IT>
      return;
 80033d8:	e25b      	b.n	8003892 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80de 	beq.w	80035a0 <HAL_UART_IRQHandler+0x22c>
 80033e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80d1 	beq.w	80035a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_UART_IRQHandler+0xae>
 800340a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_UART_IRQHandler+0xd2>
 800342e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xf6>
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f043 0204 	orr.w	r2, r3, #4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d011      	beq.n	800349a <HAL_UART_IRQHandler+0x126>
 8003476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f043 0208 	orr.w	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 81f2 	beq.w	8003888 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_UART_IRQHandler+0x14e>
 80034b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb7d 	bl	8003bbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034cc:	2b40      	cmp	r3, #64	@ 0x40
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_UART_IRQHandler+0x17a>
 80034e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d04f      	beq.n	800358e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa85 	bl	80039fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fe:	2b40      	cmp	r3, #64	@ 0x40
 8003500:	d141      	bne.n	8003586 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800351c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3314      	adds	r3, #20
 800352a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800352e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800353a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1d9      	bne.n	8003502 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d013      	beq.n	800357e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	4a7e      	ldr	r2, [pc, #504]	@ (8003754 <HAL_UART_IRQHandler+0x3e0>)
 800355c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd ff2f 	bl	80013c6 <HAL_DMA_Abort_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003578:	4610      	mov	r0, r2
 800357a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e00e      	b.n	800359c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f994 	bl	80038ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	e00a      	b.n	800359c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f990 	bl	80038ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	e006      	b.n	800359c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f98c 	bl	80038ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800359a:	e175      	b.n	8003888 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	bf00      	nop
    return;
 800359e:	e173      	b.n	8003888 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	f040 814f 	bne.w	8003848 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8148 	beq.w	8003848 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8141 	beq.w	8003848 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b40      	cmp	r3, #64	@ 0x40
 80035e8:	f040 80b6 	bne.w	8003758 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8145 	beq.w	800388c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800360a:	429a      	cmp	r2, r3
 800360c:	f080 813e 	bcs.w	800388c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003616:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003622:	f000 8088 	beq.w	8003736 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800363c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800365e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1d9      	bne.n	8003626 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003696:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800369a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800369e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e1      	bne.n	8003672 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3314      	adds	r3, #20
 80036b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e3      	bne.n	80036ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003706:	f023 0310 	bic.w	r3, r3, #16
 800370a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003718:	65ba      	str	r2, [r7, #88]	@ 0x58
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800371e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e3      	bne.n	80036f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fdd8 	bl	80012e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003744:	b29b      	uxth	r3, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8b7 	bl	80038c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003752:	e09b      	b.n	800388c <HAL_UART_IRQHandler+0x518>
 8003754:	08003ac5 	.word	0x08003ac5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003760:	b29b      	uxth	r3, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 808e 	beq.w	8003890 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8089 	beq.w	8003890 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800378e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003794:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80037a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3314      	adds	r3, #20
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	623b      	str	r3, [r7, #32]
   return(result);
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3314      	adds	r3, #20
 80037d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037da:	633a      	str	r2, [r7, #48]	@ 0x30
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e3      	bne.n	80037b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	60fb      	str	r3, [r7, #12]
   return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0310 	bic.w	r3, r3, #16
 8003812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003820:	61fa      	str	r2, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	617b      	str	r3, [r7, #20]
   return(result);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e3      	bne.n	80037fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800383a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800383e:	4619      	mov	r1, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f83d 	bl	80038c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003846:	e023      	b.n	8003890 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_UART_IRQHandler+0x4f4>
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f943 	bl	8003aec <UART_Transmit_IT>
    return;
 8003866:	e014      	b.n	8003892 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00e      	beq.n	8003892 <HAL_UART_IRQHandler+0x51e>
 8003874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f983 	bl	8003b8c <UART_EndTransmit_IT>
    return;
 8003886:	e004      	b.n	8003892 <HAL_UART_IRQHandler+0x51e>
    return;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <HAL_UART_IRQHandler+0x51e>
      return;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_UART_IRQHandler+0x51e>
      return;
 8003890:	bf00      	nop
  }
}
 8003892:	37e8      	adds	r7, #232	@ 0xe8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e8:	e03b      	b.n	8003962 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d037      	beq.n	8003962 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7fd fbb7 	bl	8001064 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <UART_WaitOnFlagUntilTimeout+0x30>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e03a      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d023      	beq.n	8003962 <UART_WaitOnFlagUntilTimeout+0x8a>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b80      	cmp	r3, #128	@ 0x80
 800391e:	d020      	beq.n	8003962 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b40      	cmp	r3, #64	@ 0x40
 8003924:	d01d      	beq.n	8003962 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b08      	cmp	r3, #8
 8003932:	d116      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f857 	bl	80039fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2208      	movs	r2, #8
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00f      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	bf0c      	ite	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	2300      	movne	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	429a      	cmp	r2, r3
 800397e:	d0b4      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2222      	movs	r2, #34	@ 0x22
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0220 	orr.w	r2, r2, #32
 80039ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b095      	sub	sp, #84	@ 0x54
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d119      	bne.n	8003aaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f023 0310 	bic.w	r3, r3, #16
 8003a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a96:	61ba      	str	r2, [r7, #24]
 8003a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e5      	bne.n	8003a76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ab8:	bf00      	nop
 8003aba:	3754      	adds	r7, #84	@ 0x54
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff fee4 	bl	80038ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b21      	cmp	r3, #33	@ 0x21
 8003afe:	d13e      	bne.n	8003b7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b08:	d114      	bne.n	8003b34 <UART_Transmit_IT+0x48>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d110      	bne.n	8003b34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	621a      	str	r2, [r3, #32]
 8003b32:	e008      	b.n	8003b46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	1c59      	adds	r1, r3, #1
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6211      	str	r1, [r2, #32]
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4619      	mov	r1, r3
 8003b54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff fe73 	bl	8003898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	@ 0x30
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b22      	cmp	r3, #34	@ 0x22
 8003bce:	f040 80ae 	bne.w	8003d2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	d117      	bne.n	8003c0c <UART_Receive_IT+0x50>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c0a:	e026      	b.n	8003c5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c1e:	d007      	beq.n	8003c30 <UART_Receive_IT+0x74>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <UART_Receive_IT+0x82>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e008      	b.n	8003c50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4619      	mov	r1, r3
 8003c68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d15d      	bne.n	8003d2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0220 	bic.w	r2, r2, #32
 8003c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d135      	bne.n	8003d20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f023 0310 	bic.w	r3, r3, #16
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	623a      	str	r2, [r7, #32]
 8003cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	69f9      	ldr	r1, [r7, #28]
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e5      	bne.n	8003cba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d10a      	bne.n	8003d12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fdd1 	bl	80038c0 <HAL_UARTEx_RxEventCallback>
 8003d1e:	e002      	b.n	8003d26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fc fed9 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e002      	b.n	8003d30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3730      	adds	r7, #48	@ 0x30
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0c0      	sub	sp, #256	@ 0x100
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	ea40 0301 	orr.w	r3, r0, r1
 8003d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d90:	f021 010c 	bic.w	r1, r1, #12
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	6999      	ldr	r1, [r3, #24]
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	ea40 0301 	orr.w	r3, r0, r1
 8003dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8004004 <UART_SetConfig+0x2cc>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d005      	beq.n	8003dd8 <UART_SetConfig+0xa0>
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004008 <UART_SetConfig+0x2d0>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d104      	bne.n	8003de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7ff f81c 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003de0:	e003      	b.n	8003dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7ff f803 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df4:	f040 810c 	bne.w	8004010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e12:	415b      	adcs	r3, r3
 8003e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	eb12 0801 	adds.w	r8, r2, r1
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb43 0901 	adc.w	r9, r3, r1
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3a:	4690      	mov	r8, r2
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	eb18 0303 	adds.w	r3, r8, r3
 8003e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e48:	462b      	mov	r3, r5
 8003e4a:	eb49 0303 	adc.w	r3, r9, r3
 8003e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e66:	460b      	mov	r3, r1
 8003e68:	18db      	adds	r3, r3, r3
 8003e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e7c:	f7fc f9b6 	bl	80001ec <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4b61      	ldr	r3, [pc, #388]	@ (800400c <UART_SetConfig+0x2d4>)
 8003e86:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	011c      	lsls	r4, r3, #4
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed0:	4692      	mov	sl, r2
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	4643      	mov	r3, r8
 8003ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003efc:	460b      	mov	r3, r1
 8003efe:	18db      	adds	r3, r3, r3
 8003f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f02:	4613      	mov	r3, r2
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f12:	f7fc f96b 	bl	80001ec <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <UART_SetConfig+0x2d4>)
 8003f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2264      	movs	r2, #100	@ 0x64
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	1acb      	subs	r3, r1, r3
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <UART_SetConfig+0x2d4>)
 8003f34:	fba3 2302 	umull	r2, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f40:	441c      	add	r4, r3
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fb8:	460b      	mov	r3, r1
 8003fba:	18db      	adds	r3, r3, r3
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fce:	f7fc f90d 	bl	80001ec <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <UART_SetConfig+0x2d4>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	@ 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3332      	adds	r3, #50	@ 0x32
 8003fea:	4a08      	ldr	r2, [pc, #32]	@ (800400c <UART_SetConfig+0x2d4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4422      	add	r2, r4
 8003ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004000:	e106      	b.n	8004210 <UART_SetConfig+0x4d8>
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40011400 	.word	0x40011400
 800400c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800401e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004022:	4642      	mov	r2, r8
 8004024:	464b      	mov	r3, r9
 8004026:	1891      	adds	r1, r2, r2
 8004028:	6239      	str	r1, [r7, #32]
 800402a:	415b      	adcs	r3, r3
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
 800402e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004032:	4641      	mov	r1, r8
 8004034:	1854      	adds	r4, r2, r1
 8004036:	4649      	mov	r1, r9
 8004038:	eb43 0501 	adc.w	r5, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	4643      	mov	r3, r8
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004058:	464b      	mov	r3, r9
 800405a:	eb45 0303 	adc.w	r3, r5, r3
 800405e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800406e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800407e:	4629      	mov	r1, r5
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004088:	4621      	mov	r1, r4
 800408a:	008a      	lsls	r2, r1, #2
 800408c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004090:	f7fc f8ac 	bl	80001ec <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b60      	ldr	r3, [pc, #384]	@ (800421c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	61b9      	str	r1, [r7, #24]
 80040bc:	415b      	adcs	r3, r3
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	4641      	mov	r1, r8
 80040c6:	1851      	adds	r1, r2, r1
 80040c8:	6139      	str	r1, [r7, #16]
 80040ca:	4649      	mov	r1, r9
 80040cc:	414b      	adcs	r3, r1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040dc:	4659      	mov	r1, fp
 80040de:	00cb      	lsls	r3, r1, #3
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e6:	4651      	mov	r1, sl
 80040e8:	00ca      	lsls	r2, r1, #3
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	4642      	mov	r2, r8
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f8:	464b      	mov	r3, r9
 80040fa:	460a      	mov	r2, r1
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800410e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800412e:	f7fc f85d 	bl	80001ec <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4611      	mov	r1, r2
 8004138:	4b38      	ldr	r3, [pc, #224]	@ (800421c <UART_SetConfig+0x4e4>)
 800413a:	fba3 2301 	umull	r2, r3, r3, r1
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2264      	movs	r2, #100	@ 0x64
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	3332      	adds	r3, #50	@ 0x32
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <UART_SetConfig+0x4e4>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004158:	441c      	add	r4, r3
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	673b      	str	r3, [r7, #112]	@ 0x70
 8004162:	677a      	str	r2, [r7, #116]	@ 0x74
 8004164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	1891      	adds	r1, r2, r2
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	415b      	adcs	r3, r3
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	4641      	mov	r1, r8
 800417a:	1851      	adds	r1, r2, r1
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	4649      	mov	r1, r9
 8004180:	414b      	adcs	r3, r1
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004190:	4659      	mov	r1, fp
 8004192:	00cb      	lsls	r3, r1, #3
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419a:	4651      	mov	r1, sl
 800419c:	00ca      	lsls	r2, r1, #3
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041aa:	464b      	mov	r3, r9
 80041ac:	460a      	mov	r2, r1
 80041ae:	eb42 0303 	adc.w	r3, r2, r3
 80041b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041be:	667a      	str	r2, [r7, #100]	@ 0x64
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041cc:	4649      	mov	r1, r9
 80041ce:	008b      	lsls	r3, r1, #2
 80041d0:	4641      	mov	r1, r8
 80041d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d6:	4641      	mov	r1, r8
 80041d8:	008a      	lsls	r2, r1, #2
 80041da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041de:	f7fc f805 	bl	80001ec <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <UART_SetConfig+0x4e4>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	@ 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	3332      	adds	r3, #50	@ 0x32
 80041fa:	4a08      	ldr	r2, [pc, #32]	@ (800421c <UART_SetConfig+0x4e4>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4422      	add	r2, r4
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004216:	46bd      	mov	sp, r7
 8004218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421c:	51eb851f 	.word	0x51eb851f

08004220 <memset>:
 8004220:	4402      	add	r2, r0
 8004222:	4603      	mov	r3, r0
 8004224:	4293      	cmp	r3, r2
 8004226:	d100      	bne.n	800422a <memset+0xa>
 8004228:	4770      	bx	lr
 800422a:	f803 1b01 	strb.w	r1, [r3], #1
 800422e:	e7f9      	b.n	8004224 <memset+0x4>

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4d0d      	ldr	r5, [pc, #52]	@ (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	@ (800426c <__libc_init_array+0x3c>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2600      	movs	r6, #0
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4d0b      	ldr	r5, [pc, #44]	@ (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	@ (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f818 	bl	8004278 <_init>
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2600      	movs	r6, #0
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f855 3b04 	ldr.w	r3, [r5], #4
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	08004364 	.word	0x08004364
 800426c:	08004364 	.word	0x08004364
 8004270:	08004364 	.word	0x08004364
 8004274:	08004368 	.word	0x08004368

08004278 <_init>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr

08004284 <_fini>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr
