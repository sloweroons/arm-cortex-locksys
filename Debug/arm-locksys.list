
arm-locksys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005064  08005064  00006064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  00007094  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00006130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08005140  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007094  2**0
                  CONTENTS
 10 .bss          00000138  20000094  20000094  00007094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00007094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f44d  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002759  00000000  00000000  00016511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00018c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ef  00000000  00000000  00019940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235fe  00000000  00000000  0001a32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b2d  00000000  00000000  0003d92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d303e  00000000  00000000  0005045a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123498  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033dc  00000000  00000000  001234dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001268b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000094 	.word	0x20000094
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800504c 	.word	0x0800504c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000098 	.word	0x20000098
 80001e8:	0800504c 	.word	0x0800504c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ds3231_init>:
/*ds3231_init function accepts 3 inputs, data_array[7] is the new time settings,
  run_state commands ds3231 to run or halt (CLOCK_RUN and CLOCK_HALT), and reset_state
  could force-reset ds3231 (FORCE_RESET) or checks if ds3231 is reset beforehand
  (NO_FORCE_RESET)*/
void ds3231_init(uint8_t *data_array, uint8_t run_command, uint8_t reset_state)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
 80004e8:	4613      	mov	r3, r2
 80004ea:	70bb      	strb	r3, [r7, #2]
  ds3231_I2C_init();
 80004ec:	f000 fd80 	bl	8000ff0 <ds3231_I2C_init>
  if (((ds3231_init_status_report() == DS3231_NOT_INITIALIZED) && (reset_state == NO_FORCE_RESET)) || (reset_state == FORCE_RESET))
 80004f0:	f000 f85c 	bl	80005ac <ds3231_init_status_report>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d102      	bne.n	8000500 <ds3231_init+0x24>
 80004fa:	78bb      	ldrb	r3, [r7, #2]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d002      	beq.n	8000506 <ds3231_init+0x2a>
 8000500:	78bb      	ldrb	r3, [r7, #2]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d106      	bne.n	8000514 <ds3231_init+0x38>
  {
    ds3231_reset(ALL);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f884 	bl	8000614 <ds3231_reset>
    ds3231_set(TIME, data_array);
 800050c:	6879      	ldr	r1, [r7, #4]
 800050e:	200e      	movs	r0, #14
 8000510:	f000 fad6 	bl	8000ac0 <ds3231_set>
  }
  ds3231_init_status_update();        /*now the device is initialized (DS3231_INITIALIZED)*/
 8000514:	f000 f860 	bl	80005d8 <ds3231_init_status_update>
  ds3231_run_command(run_command);
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f804 	bl	8000528 <ds3231_run_command>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <ds3231_run_command>:

/*function to command ds3231 to stop or start updating its time registers, WORKS ONLY WITH BATTERY BACKED DS3231*/
uint8_t ds3231_run_command(uint8_t command)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  switch (command)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d018      	beq.n	800056a <ds3231_run_command+0x42>
 8000538:	2b01      	cmp	r3, #1
 800053a:	d12d      	bne.n	8000598 <ds3231_run_command+0x70>
  {
    case CLOCK_RUN:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <ds3231_run_command+0x7c>)
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	210e      	movs	r1, #14
 8000544:	2068      	movs	r0, #104	@ 0x68
 8000546:	f000 fcf9 	bl	8000f3c <time_i2c_read_single>
      register_new_value = register_current_value & (~(1 << DS3231_BIT_EOSC));
 800054a:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <ds3231_run_command+0x7c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <ds3231_run_command+0x80>)
 8000556:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <ds3231_run_command+0x80>)
 800055a:	b2db      	uxtb	r3, r3
 800055c:	461a      	mov	r2, r3
 800055e:	210e      	movs	r1, #14
 8000560:	2068      	movs	r0, #104	@ 0x68
 8000562:	f000 fc91 	bl	8000e88 <time_i2c_write_single>
      return OPERATION_DONE;
 8000566:	2301      	movs	r3, #1
 8000568:	e017      	b.n	800059a <ds3231_run_command+0x72>
    case CLOCK_HALT:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <ds3231_run_command+0x7c>)
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	210e      	movs	r1, #14
 8000572:	2068      	movs	r0, #104	@ 0x68
 8000574:	f000 fce2 	bl	8000f3c <time_i2c_read_single>
      register_new_value = register_current_value | (1 << DS3231_BIT_EOSC);
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <ds3231_run_command+0x7c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <ds3231_run_command+0x80>)
 8000584:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <ds3231_run_command+0x80>)
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	210e      	movs	r1, #14
 800058e:	2068      	movs	r0, #104	@ 0x68
 8000590:	f000 fc7a 	bl	8000e88 <time_i2c_write_single>
      return OPERATION_DONE;
 8000594:	2301      	movs	r3, #1
 8000596:	e000      	b.n	800059a <ds3231_run_command+0x72>
    default:
      return OPERATION_FAILED;
 8000598:	2300      	movs	r3, #0
  }
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000b0 	.word	0x200000b0
 80005a8:	200000b1 	.word	0x200000b1

080005ac <ds3231_init_status_report>:
    return CLOCK_HALT;
}

/*function to read the oscillator flag OSF and to decide whether it has been reset beforehand or not*/
uint8_t ds3231_init_status_report()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <ds3231_init_status_report+0x28>)
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	210f      	movs	r1, #15
 80005b8:	2068      	movs	r0, #104	@ 0x68
 80005ba:	f000 fcbf 	bl	8000f3c <time_i2c_read_single>
  if (register_current_value & (1 << DS3231_BIT_OSF))
 80005be:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <ds3231_init_status_report+0x28>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	da01      	bge.n	80005cc <ds3231_init_status_report+0x20>
    return DS3231_NOT_INITIALIZED;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e000      	b.n	80005ce <ds3231_init_status_report+0x22>
  else
    return DS3231_INITIALIZED;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000b0 	.word	0x200000b0

080005d8 <ds3231_init_status_update>:

/*function to reset the OSF bit (OSF = 0)*/
void ds3231_init_status_update()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <ds3231_init_status_update+0x34>)
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	210f      	movs	r1, #15
 80005e4:	2068      	movs	r0, #104	@ 0x68
 80005e6:	f000 fca9 	bl	8000f3c <time_i2c_read_single>
  register_new_value = register_current_value & (~(1 << DS3231_BIT_OSF));
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <ds3231_init_status_update+0x34>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <ds3231_init_status_update+0x38>)
 80005f6:	701a      	strb	r2, [r3, #0]
  time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <ds3231_init_status_update+0x38>)
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	210f      	movs	r1, #15
 8000600:	2068      	movs	r0, #104	@ 0x68
 8000602:	f000 fc41 	bl	8000e88 <time_i2c_write_single>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000b0 	.word	0x200000b0
 8000610:	200000b1 	.word	0x200000b1

08000614 <ds3231_reset>:

/*resets the desired register(s), without affecting run_state (RUN_STATE ONLY MAKES SENSE WITH BATTERY-BACKED DS3231*/
void ds3231_reset(uint8_t option)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  /*data_clone function together with registers_clone static variables, prevent data curroption caused by reconvertig HEX to BCD*/
  ds3231_data_clone(TIME, &register_default_value[0]);
 800061e:	49b0      	ldr	r1, [pc, #704]	@ (80008e0 <ds3231_reset+0x2cc>)
 8000620:	200e      	movs	r0, #14
 8000622:	f000 fb5d 	bl	8000ce0 <ds3231_data_clone>
  ds3231_data_clone(ALARM1, &register_default_value[7]);
 8000626:	49af      	ldr	r1, [pc, #700]	@ (80008e4 <ds3231_reset+0x2d0>)
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fb59 	bl	8000ce0 <ds3231_data_clone>
  ds3231_data_clone(ALARM2, &register_default_value[0X0B]);
 800062e:	49ae      	ldr	r1, [pc, #696]	@ (80008e8 <ds3231_reset+0x2d4>)
 8000630:	200b      	movs	r0, #11
 8000632:	f000 fb55 	bl	8000ce0 <ds3231_data_clone>
  HEX_to_BCD(&time_registers_clone[0], 7);
 8000636:	2107      	movs	r1, #7
 8000638:	48ac      	ldr	r0, [pc, #688]	@ (80008ec <ds3231_reset+0x2d8>)
 800063a:	f000 fbe0 	bl	8000dfe <HEX_to_BCD>
  HEX_to_BCD(&alarm1_registers_clone[0], 4);
 800063e:	2104      	movs	r1, #4
 8000640:	48ab      	ldr	r0, [pc, #684]	@ (80008f0 <ds3231_reset+0x2dc>)
 8000642:	f000 fbdc 	bl	8000dfe <HEX_to_BCD>
  HEX_to_BCD(&alarm2_registers_clone[0], 3);
 8000646:	2103      	movs	r1, #3
 8000648:	48aa      	ldr	r0, [pc, #680]	@ (80008f4 <ds3231_reset+0x2e0>)
 800064a:	f000 fbd8 	bl	8000dfe <HEX_to_BCD>
  switch (option)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	f200 8140 	bhi.w	80008d6 <ds3231_reset+0x2c2>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <ds3231_reset+0x48>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	0800069d 	.word	0x0800069d
 8000660:	080006ad 	.word	0x080006ad
 8000664:	080006bd 	.word	0x080006bd
 8000668:	080006db 	.word	0x080006db
 800066c:	080006eb 	.word	0x080006eb
 8000670:	080006fb 	.word	0x080006fb
 8000674:	08000719 	.word	0x08000719
 8000678:	08000729 	.word	0x08000729
 800067c:	08000769 	.word	0x08000769
 8000680:	080007df 	.word	0x080007df
 8000684:	080007a9 	.word	0x080007a9
 8000688:	080007b7 	.word	0x080007b7
 800068c:	080007c5 	.word	0x080007c5
 8000690:	080008d7 	.word	0x080008d7
 8000694:	080007f3 	.word	0x080007f3
 8000698:	0800081d 	.word	0x0800081d
  {
    case SECOND:
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 800069c:	4b93      	ldr	r3, [pc, #588]	@ (80008ec <ds3231_reset+0x2d8>)
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	2068      	movs	r0, #104	@ 0x68
 80006a6:	f000 fbef 	bl	8000e88 <time_i2c_write_single>
      break;
 80006aa:	e115      	b.n	80008d8 <ds3231_reset+0x2c4>
    case MINUTE:
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 80006ac:	4b92      	ldr	r3, [pc, #584]	@ (80008f8 <ds3231_reset+0x2e4>)
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	2101      	movs	r1, #1
 80006b4:	2068      	movs	r0, #104	@ 0x68
 80006b6:	f000 fbe7 	bl	8000e88 <time_i2c_write_single>
      break;
 80006ba:	e10d      	b.n	80008d8 <ds3231_reset+0x2c4>
    case HOUR:
      time_registers_clone[2] &= (~(1 << DS3231_BIT_12_24));        /*to turn on 24 hours format by default*/
 80006bc:	4b8b      	ldr	r3, [pc, #556]	@ (80008ec <ds3231_reset+0x2d8>)
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b89      	ldr	r3, [pc, #548]	@ (80008ec <ds3231_reset+0x2d8>)
 80006c8:	709a      	strb	r2, [r3, #2]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80006ca:	4b8c      	ldr	r3, [pc, #560]	@ (80008fc <ds3231_reset+0x2e8>)
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	2102      	movs	r1, #2
 80006d2:	2068      	movs	r0, #104	@ 0x68
 80006d4:	f000 fbd8 	bl	8000e88 <time_i2c_write_single>
      break;
 80006d8:	e0fe      	b.n	80008d8 <ds3231_reset+0x2c4>
    case DAY_OF_WEEK:
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80006da:	4b89      	ldr	r3, [pc, #548]	@ (8000900 <ds3231_reset+0x2ec>)
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	2103      	movs	r1, #3
 80006e2:	2068      	movs	r0, #104	@ 0x68
 80006e4:	f000 fbd0 	bl	8000e88 <time_i2c_write_single>
      break;
 80006e8:	e0f6      	b.n	80008d8 <ds3231_reset+0x2c4>
    case DATE:
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 80006ea:	4b86      	ldr	r3, [pc, #536]	@ (8000904 <ds3231_reset+0x2f0>)
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	461a      	mov	r2, r3
 80006f0:	2104      	movs	r1, #4
 80006f2:	2068      	movs	r0, #104	@ 0x68
 80006f4:	f000 fbc8 	bl	8000e88 <time_i2c_write_single>
      break;
 80006f8:	e0ee      	b.n	80008d8 <ds3231_reset+0x2c4>
    case MONTH:
      time_registers_clone[5] &= (~(1 << DS3231_BIT_CENTURY));
 80006fa:	4b7c      	ldr	r3, [pc, #496]	@ (80008ec <ds3231_reset+0x2d8>)
 80006fc:	795b      	ldrb	r3, [r3, #5]
 80006fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b79      	ldr	r3, [pc, #484]	@ (80008ec <ds3231_reset+0x2d8>)
 8000706:	715a      	strb	r2, [r3, #5]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8000708:	4b7f      	ldr	r3, [pc, #508]	@ (8000908 <ds3231_reset+0x2f4>)
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2105      	movs	r1, #5
 8000710:	2068      	movs	r0, #104	@ 0x68
 8000712:	f000 fbb9 	bl	8000e88 <time_i2c_write_single>
      break;
 8000716:	e0df      	b.n	80008d8 <ds3231_reset+0x2c4>
    case YEAR:
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000718:	4b7c      	ldr	r3, [pc, #496]	@ (800090c <ds3231_reset+0x2f8>)
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	2106      	movs	r1, #6
 8000720:	2068      	movs	r0, #104	@ 0x68
 8000722:	f000 fbb1 	bl	8000e88 <time_i2c_write_single>
      break;
 8000726:	e0d7      	b.n	80008d8 <ds3231_reset+0x2c4>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);       /*in order to preserve running state (RUN or HALT)*/
 8000728:	4b79      	ldr	r3, [pc, #484]	@ (8000910 <ds3231_reset+0x2fc>)
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	210e      	movs	r1, #14
 8000730:	2068      	movs	r0, #104	@ 0x68
 8000732:	f000 fc03 	bl	8000f3c <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (register_default_value[0X0E] & (~(1 << DS3231_BIT_EOSC)));
 8000736:	4b76      	ldr	r3, [pc, #472]	@ (8000910 <ds3231_reset+0x2fc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25b      	sxtb	r3, r3
 800073c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000740:	b25a      	sxtb	r2, r3
 8000742:	4b67      	ldr	r3, [pc, #412]	@ (80008e0 <ds3231_reset+0x2cc>)
 8000744:	7b9b      	ldrb	r3, [r3, #14]
 8000746:	b25b      	sxtb	r3, r3
 8000748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b25b      	sxtb	r3, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b6f      	ldr	r3, [pc, #444]	@ (8000914 <ds3231_reset+0x300>)
 8000756:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000758:	4b6e      	ldr	r3, [pc, #440]	@ (8000914 <ds3231_reset+0x300>)
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	210e      	movs	r1, #14
 8000760:	2068      	movs	r0, #104	@ 0x68
 8000762:	f000 fb91 	bl	8000e88 <time_i2c_write_single>
      break;
 8000766:	e0b7      	b.n	80008d8 <ds3231_reset+0x2c4>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);       /*in order to preserve OSF flag*/
 8000768:	4b69      	ldr	r3, [pc, #420]	@ (8000910 <ds3231_reset+0x2fc>)
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	210f      	movs	r1, #15
 8000770:	2068      	movs	r0, #104	@ 0x68
 8000772:	f000 fbe3 	bl	8000f3c <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (register_default_value[0X0F] & (~(1 << DS3231_BIT_EOSC)));
 8000776:	4b66      	ldr	r3, [pc, #408]	@ (8000910 <ds3231_reset+0x2fc>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000780:	b25a      	sxtb	r2, r3
 8000782:	4b57      	ldr	r3, [pc, #348]	@ (80008e0 <ds3231_reset+0x2cc>)
 8000784:	7bdb      	ldrb	r3, [r3, #15]
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b5f      	ldr	r3, [pc, #380]	@ (8000914 <ds3231_reset+0x300>)
 8000796:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8000798:	4b5e      	ldr	r3, [pc, #376]	@ (8000914 <ds3231_reset+0x300>)
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	210f      	movs	r1, #15
 80007a0:	2068      	movs	r0, #104	@ 0x68
 80007a2:	f000 fb71 	bl	8000e88 <time_i2c_write_single>
      break;
 80007a6:	e097      	b.n	80008d8 <ds3231_reset+0x2c4>
    case ALARM1:
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_ALARM1_SECONDS, &alarm1_registers_clone[0], 4);
 80007a8:	2304      	movs	r3, #4
 80007aa:	4a51      	ldr	r2, [pc, #324]	@ (80008f0 <ds3231_reset+0x2dc>)
 80007ac:	2107      	movs	r1, #7
 80007ae:	2068      	movs	r0, #104	@ 0x68
 80007b0:	f000 fb8e 	bl	8000ed0 <time_i2c_write_multi>
      break;
 80007b4:	e090      	b.n	80008d8 <ds3231_reset+0x2c4>
    case ALARM2:
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_ALARM2_MINUTES, &alarm2_registers_clone[0], 3);
 80007b6:	2303      	movs	r3, #3
 80007b8:	4a4e      	ldr	r2, [pc, #312]	@ (80008f4 <ds3231_reset+0x2e0>)
 80007ba:	210b      	movs	r1, #11
 80007bc:	2068      	movs	r0, #104	@ 0x68
 80007be:	f000 fb87 	bl	8000ed0 <time_i2c_write_multi>
      break;
 80007c2:	e089      	b.n	80008d8 <ds3231_reset+0x2c4>
    case ALARMS:
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_ALARM1_SECONDS, &alarm1_registers_clone[0], 4);
 80007c4:	2304      	movs	r3, #4
 80007c6:	4a4a      	ldr	r2, [pc, #296]	@ (80008f0 <ds3231_reset+0x2dc>)
 80007c8:	2107      	movs	r1, #7
 80007ca:	2068      	movs	r0, #104	@ 0x68
 80007cc:	f000 fb80 	bl	8000ed0 <time_i2c_write_multi>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_ALARM2_MINUTES, &alarm2_registers_clone[0], 3);
 80007d0:	2303      	movs	r3, #3
 80007d2:	4a48      	ldr	r2, [pc, #288]	@ (80008f4 <ds3231_reset+0x2e0>)
 80007d4:	210b      	movs	r1, #11
 80007d6:	2068      	movs	r0, #104	@ 0x68
 80007d8:	f000 fb7a 	bl	8000ed0 <time_i2c_write_multi>
      break;
 80007dc:	e07c      	b.n	80008d8 <ds3231_reset+0x2c4>
    case AGING_OFFSET:
      register_new_value = DS3231_REGISTER_AGING_OFFSET_DEFAULT;
 80007de:	4b4d      	ldr	r3, [pc, #308]	@ (8000914 <ds3231_reset+0x300>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80007e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000914 <ds3231_reset+0x300>)
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	2110      	movs	r1, #16
 80007ec:	2068      	movs	r0, #104	@ 0x68
 80007ee:	f000 fb4b 	bl	8000e88 <time_i2c_write_single>
    case TIME:
      time_registers_clone[2] &= (~(1 << DS3231_BIT_12_24));
 80007f2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ec <ds3231_reset+0x2d8>)
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <ds3231_reset+0x2d8>)
 80007fe:	709a      	strb	r2, [r3, #2]
      time_registers_clone[5] &= (~(1 << DS3231_BIT_CENTURY));
 8000800:	4b3a      	ldr	r3, [pc, #232]	@ (80008ec <ds3231_reset+0x2d8>)
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <ds3231_reset+0x2d8>)
 800080c:	715a      	strb	r2, [r3, #5]
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 800080e:	2307      	movs	r3, #7
 8000810:	4a36      	ldr	r2, [pc, #216]	@ (80008ec <ds3231_reset+0x2d8>)
 8000812:	2100      	movs	r1, #0
 8000814:	2068      	movs	r0, #104	@ 0x68
 8000816:	f000 fb5b 	bl	8000ed0 <time_i2c_write_multi>
      break;
 800081a:	e05d      	b.n	80008d8 <ds3231_reset+0x2c4>
    case ALL:
      /*TIME registers reset*/
      time_registers_clone[2] &= (~(1 << DS3231_BIT_12_24));        /*to preserve 24 hours mode*/
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <ds3231_reset+0x2d8>)
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <ds3231_reset+0x2d8>)
 8000828:	709a      	strb	r2, [r3, #2]
      time_registers_clone[5] &= (~(1 << DS3231_BIT_CENTURY));        /*resetting century bit*/
 800082a:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <ds3231_reset+0x2d8>)
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <ds3231_reset+0x2d8>)
 8000836:	715a      	strb	r2, [r3, #5]
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);       /*to reset all the TIME registers*/
 8000838:	2307      	movs	r3, #7
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <ds3231_reset+0x2d8>)
 800083c:	2100      	movs	r1, #0
 800083e:	2068      	movs	r0, #104	@ 0x68
 8000840:	f000 fb46 	bl	8000ed0 <time_i2c_write_multi>
      /*CONTROL and CONTROL_STATUS registers reset*/
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);       /*in order to preserve OSF flag*/
 8000844:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <ds3231_reset+0x2fc>)
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	210f      	movs	r1, #15
 800084c:	2068      	movs	r0, #104	@ 0x68
 800084e:	f000 fb75 	bl	8000f3c <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (register_default_value[0X0F] & (~(1 << DS3231_BIT_EOSC)));
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <ds3231_reset+0x2fc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b25b      	sxtb	r3, r3
 8000858:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800085c:	b25a      	sxtb	r2, r3
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <ds3231_reset+0x2cc>)
 8000860:	7bdb      	ldrb	r3, [r3, #15]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000868:	b25b      	sxtb	r3, r3
 800086a:	4313      	orrs	r3, r2
 800086c:	b25b      	sxtb	r3, r3
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <ds3231_reset+0x300>)
 8000872:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <ds3231_reset+0x300>)
 8000876:	b2db      	uxtb	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	210f      	movs	r1, #15
 800087c:	2068      	movs	r0, #104	@ 0x68
 800087e:	f000 fb03 	bl	8000e88 <time_i2c_write_single>
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);       /*to preserve run_status, either RUN or HALT*/
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <ds3231_reset+0x2fc>)
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	210e      	movs	r1, #14
 800088a:	2068      	movs	r0, #104	@ 0x68
 800088c:	f000 fb56 	bl	8000f3c <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (register_default_value[0X0E] & (~(1 << DS3231_BIT_EOSC)));
 8000890:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <ds3231_reset+0x2fc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800089a:	b25a      	sxtb	r2, r3
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <ds3231_reset+0x2cc>)
 800089e:	7b9b      	ldrb	r3, [r3, #14]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <ds3231_reset+0x300>)
 80008b0:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <ds3231_reset+0x300>)
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	210e      	movs	r1, #14
 80008ba:	2068      	movs	r0, #104	@ 0x68
 80008bc:	f000 fae4 	bl	8000e88 <time_i2c_write_single>
      /*AGING_OFFSET registers reset*/
      register_new_value = DS3231_REGISTER_AGING_OFFSET_DEFAULT;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <ds3231_reset+0x300>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <ds3231_reset+0x300>)
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	2110      	movs	r1, #16
 80008ce:	2068      	movs	r0, #104	@ 0x68
 80008d0:	f000 fada 	bl	8000e88 <time_i2c_write_single>
      break;
 80008d4:	e000      	b.n	80008d8 <ds3231_reset+0x2c4>
    default:
      break;
 80008d6:	bf00      	nop
  }
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000007 	.word	0x20000007
 80008e8:	2000000b 	.word	0x2000000b
 80008ec:	200000b4 	.word	0x200000b4
 80008f0:	200000bc 	.word	0x200000bc
 80008f4:	200000c0 	.word	0x200000c0
 80008f8:	200000b5 	.word	0x200000b5
 80008fc:	200000b6 	.word	0x200000b6
 8000900:	200000b7 	.word	0x200000b7
 8000904:	200000b8 	.word	0x200000b8
 8000908:	200000b9 	.word	0x200000b9
 800090c:	200000ba 	.word	0x200000ba
 8000910:	200000b0 	.word	0x200000b0
 8000914:	200000b1 	.word	0x200000b1

08000918 <ds3231_read>:

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b0e      	cmp	r3, #14
 8000928:	f200 80c0 	bhi.w	8000aac <ds3231_read+0x194>
 800092c:	a201      	add	r2, pc, #4	@ (adr r2, 8000934 <ds3231_read+0x1c>)
 800092e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000932:	bf00      	nop
 8000934:	08000971 	.word	0x08000971
 8000938:	08000991 	.word	0x08000991
 800093c:	080009b1 	.word	0x080009b1
 8000940:	080009d1 	.word	0x080009d1
 8000944:	080009f1 	.word	0x080009f1
 8000948:	08000a11 	.word	0x08000a11
 800094c:	08000a31 	.word	0x08000a31
 8000950:	08000a51 	.word	0x08000a51
 8000954:	08000a69 	.word	0x08000a69
 8000958:	08000a81 	.word	0x08000a81
 800095c:	08000aad 	.word	0x08000aad
 8000960:	08000aad 	.word	0x08000aad
 8000964:	08000aad 	.word	0x08000aad
 8000968:	08000aad 	.word	0x08000aad
 800096c:	08000a97 	.word	0x08000a97
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8000970:	4b52      	ldr	r3, [pc, #328]	@ (8000abc <ds3231_read+0x1a4>)
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	2068      	movs	r0, #104	@ 0x68
 800097a:	f000 fadf 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 800097e:	4b4f      	ldr	r3, [pc, #316]	@ (8000abc <ds3231_read+0x1a4>)
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000986:	2101      	movs	r1, #1
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f000 f9f9 	bl	8000d80 <BCD_to_HEX>
      break;
 800098e:	e08f      	b.n	8000ab0 <ds3231_read+0x198>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8000990:	4b4a      	ldr	r3, [pc, #296]	@ (8000abc <ds3231_read+0x1a4>)
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	2101      	movs	r1, #1
 8000998:	2068      	movs	r0, #104	@ 0x68
 800099a:	f000 facf 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 800099e:	4b47      	ldr	r3, [pc, #284]	@ (8000abc <ds3231_read+0x1a4>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80009a6:	2101      	movs	r1, #1
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f000 f9e9 	bl	8000d80 <BCD_to_HEX>
      break;
 80009ae:	e07f      	b.n	8000ab0 <ds3231_read+0x198>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 80009b0:	4b42      	ldr	r3, [pc, #264]	@ (8000abc <ds3231_read+0x1a4>)
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	2102      	movs	r1, #2
 80009b8:	2068      	movs	r0, #104	@ 0x68
 80009ba:	f000 fabf 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 80009be:	4b3f      	ldr	r3, [pc, #252]	@ (8000abc <ds3231_read+0x1a4>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80009c6:	2101      	movs	r1, #1
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f000 f9d9 	bl	8000d80 <BCD_to_HEX>
      break;
 80009ce:	e06f      	b.n	8000ab0 <ds3231_read+0x198>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 80009d0:	4b3a      	ldr	r3, [pc, #232]	@ (8000abc <ds3231_read+0x1a4>)
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	2103      	movs	r1, #3
 80009d8:	2068      	movs	r0, #104	@ 0x68
 80009da:	f000 faaf 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 80009de:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <ds3231_read+0x1a4>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80009e6:	2101      	movs	r1, #1
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f000 f9c9 	bl	8000d80 <BCD_to_HEX>
      break;
 80009ee:	e05f      	b.n	8000ab0 <ds3231_read+0x198>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 80009f0:	4b32      	ldr	r3, [pc, #200]	@ (8000abc <ds3231_read+0x1a4>)
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	2104      	movs	r1, #4
 80009f8:	2068      	movs	r0, #104	@ 0x68
 80009fa:	f000 fa9f 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <ds3231_read+0x1a4>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000a06:	2101      	movs	r1, #1
 8000a08:	6838      	ldr	r0, [r7, #0]
 8000a0a:	f000 f9b9 	bl	8000d80 <BCD_to_HEX>
      break;
 8000a0e:	e04f      	b.n	8000ab0 <ds3231_read+0x198>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <ds3231_read+0x1a4>)
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	2105      	movs	r1, #5
 8000a18:	2068      	movs	r0, #104	@ 0x68
 8000a1a:	f000 fa8f 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <ds3231_read+0x1a4>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000a26:	2101      	movs	r1, #1
 8000a28:	6838      	ldr	r0, [r7, #0]
 8000a2a:	f000 f9a9 	bl	8000d80 <BCD_to_HEX>
      break;
 8000a2e:	e03f      	b.n	8000ab0 <ds3231_read+0x198>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <ds3231_read+0x1a4>)
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	2106      	movs	r1, #6
 8000a38:	2068      	movs	r0, #104	@ 0x68
 8000a3a:	f000 fa7f 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <ds3231_read+0x1a4>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000a46:	2101      	movs	r1, #1
 8000a48:	6838      	ldr	r0, [r7, #0]
 8000a4a:	f000 f999 	bl	8000d80 <BCD_to_HEX>
      break;
 8000a4e:	e02f      	b.n	8000ab0 <ds3231_read+0x198>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <ds3231_read+0x1a4>)
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	210e      	movs	r1, #14
 8000a58:	2068      	movs	r0, #104	@ 0x68
 8000a5a:	f000 fa6f 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <ds3231_read+0x1a4>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	701a      	strb	r2, [r3, #0]
      break;
 8000a66:	e023      	b.n	8000ab0 <ds3231_read+0x198>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <ds3231_read+0x1a4>)
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	210f      	movs	r1, #15
 8000a70:	2068      	movs	r0, #104	@ 0x68
 8000a72:	f000 fa63 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <ds3231_read+0x1a4>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	701a      	strb	r2, [r3, #0]
      break;
 8000a7e:	e017      	b.n	8000ab0 <ds3231_read+0x198>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <ds3231_read+0x1a4>)
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	2110      	movs	r1, #16
 8000a88:	2068      	movs	r0, #104	@ 0x68
 8000a8a:	f000 fa57 	bl	8000f3c <time_i2c_read_single>
      *data_array = register_current_value;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <ds3231_read+0x1a4>)
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8000a96:	2307      	movs	r3, #7
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2068      	movs	r0, #104	@ 0x68
 8000a9e:	f000 fa71 	bl	8000f84 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	6838      	ldr	r0, [r7, #0]
 8000aa6:	f000 f96b 	bl	8000d80 <BCD_to_HEX>
      break;
 8000aaa:	e001      	b.n	8000ab0 <ds3231_read+0x198>
    default:
      return OPERATION_FAILED;
 8000aac:	2300      	movs	r3, #0
 8000aae:	e000      	b.n	8000ab2 <ds3231_read+0x19a>
  }
  return OPERATION_DONE;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000b0 	.word	0x200000b0

08000ac0 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b0e      	cmp	r3, #14
 8000ad0:	f200 80ed 	bhi.w	8000cae <ds3231_set+0x1ee>
 8000ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <ds3231_set+0x1c>)
 8000ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ada:	bf00      	nop
 8000adc:	08000b19 	.word	0x08000b19
 8000ae0:	08000b39 	.word	0x08000b39
 8000ae4:	08000b59 	.word	0x08000b59
 8000ae8:	08000b79 	.word	0x08000b79
 8000aec:	08000b99 	.word	0x08000b99
 8000af0:	08000bb9 	.word	0x08000bb9
 8000af4:	08000bd9 	.word	0x08000bd9
 8000af8:	08000bf9 	.word	0x08000bf9
 8000afc:	08000c39 	.word	0x08000c39
 8000b00:	08000c97 	.word	0x08000c97
 8000b04:	08000caf 	.word	0x08000caf
 8000b08:	08000caf 	.word	0x08000caf
 8000b0c:	08000caf 	.word	0x08000caf
 8000b10:	08000caf 	.word	0x08000caf
 8000b14:	08000c79 	.word	0x08000c79
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b67      	ldr	r3, [pc, #412]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b1e:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000b20:	2101      	movs	r1, #1
 8000b22:	4866      	ldr	r0, [pc, #408]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b24:	f000 f96b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 8000b28:	4b64      	ldr	r3, [pc, #400]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2068      	movs	r0, #104	@ 0x68
 8000b32:	f000 f9a9 	bl	8000e88 <time_i2c_write_single>
      break;
 8000b36:	e0bc      	b.n	8000cb2 <ds3231_set+0x1f2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b3e:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 8000b40:	2101      	movs	r1, #1
 8000b42:	485f      	ldr	r0, [pc, #380]	@ (8000cc0 <ds3231_set+0x200>)
 8000b44:	f000 f95b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 8000b48:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc0 <ds3231_set+0x200>)
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2068      	movs	r0, #104	@ 0x68
 8000b52:	f000 f999 	bl	8000e88 <time_i2c_write_single>
      break;
 8000b56:	e0ac      	b.n	8000cb2 <ds3231_set+0x1f2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b57      	ldr	r3, [pc, #348]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b5e:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 8000b60:	2101      	movs	r1, #1
 8000b62:	4858      	ldr	r0, [pc, #352]	@ (8000cc4 <ds3231_set+0x204>)
 8000b64:	f000 f94b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 8000b68:	4b56      	ldr	r3, [pc, #344]	@ (8000cc4 <ds3231_set+0x204>)
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2102      	movs	r1, #2
 8000b70:	2068      	movs	r0, #104	@ 0x68
 8000b72:	f000 f989 	bl	8000e88 <time_i2c_write_single>
      break;
 8000b76:	e09c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b7e:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 8000b80:	2101      	movs	r1, #1
 8000b82:	4851      	ldr	r0, [pc, #324]	@ (8000cc8 <ds3231_set+0x208>)
 8000b84:	f000 f93b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 8000b88:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc8 <ds3231_set+0x208>)
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2103      	movs	r1, #3
 8000b90:	2068      	movs	r0, #104	@ 0x68
 8000b92:	f000 f979 	bl	8000e88 <time_i2c_write_single>
      break;
 8000b96:	e08c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b47      	ldr	r3, [pc, #284]	@ (8000cbc <ds3231_set+0x1fc>)
 8000b9e:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	484a      	ldr	r0, [pc, #296]	@ (8000ccc <ds3231_set+0x20c>)
 8000ba4:	f000 f92b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8000ba8:	4b48      	ldr	r3, [pc, #288]	@ (8000ccc <ds3231_set+0x20c>)
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	2104      	movs	r1, #4
 8000bb0:	2068      	movs	r0, #104	@ 0x68
 8000bb2:	f000 f969 	bl	8000e88 <time_i2c_write_single>
      break;
 8000bb6:	e07c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8000cbc <ds3231_set+0x1fc>)
 8000bbe:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4843      	ldr	r0, [pc, #268]	@ (8000cd0 <ds3231_set+0x210>)
 8000bc4:	f000 f91b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8000bc8:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <ds3231_set+0x210>)
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2105      	movs	r1, #5
 8000bd0:	2068      	movs	r0, #104	@ 0x68
 8000bd2:	f000 f959 	bl	8000e88 <time_i2c_write_single>
      break;
 8000bd6:	e06c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b37      	ldr	r3, [pc, #220]	@ (8000cbc <ds3231_set+0x1fc>)
 8000bde:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000be0:	2101      	movs	r1, #1
 8000be2:	483c      	ldr	r0, [pc, #240]	@ (8000cd4 <ds3231_set+0x214>)
 8000be4:	f000 f90b 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <ds3231_set+0x214>)
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	2106      	movs	r1, #6
 8000bf0:	2068      	movs	r0, #104	@ 0x68
 8000bf2:	f000 f949 	bl	8000e88 <time_i2c_write_single>
      break;
 8000bf6:	e05c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000bf8:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <ds3231_set+0x218>)
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	210e      	movs	r1, #14
 8000c00:	2068      	movs	r0, #104	@ 0x68
 8000c02:	f000 f99b 	bl	8000f3c <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 8000c06:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <ds3231_set+0x218>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <ds3231_set+0x21c>)
 8000c26:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <ds3231_set+0x21c>)
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	210e      	movs	r1, #14
 8000c30:	2068      	movs	r0, #104	@ 0x68
 8000c32:	f000 f929 	bl	8000e88 <time_i2c_write_single>
      break;
 8000c36:	e03c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <ds3231_set+0x218>)
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	210f      	movs	r1, #15
 8000c40:	2068      	movs	r0, #104	@ 0x68
 8000c42:	f000 f97b 	bl	8000f3c <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <ds3231_set+0x218>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <ds3231_set+0x21c>)
 8000c66:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <ds3231_set+0x21c>)
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	210f      	movs	r1, #15
 8000c70:	2068      	movs	r0, #104	@ 0x68
 8000c72:	f000 f909 	bl	8000e88 <time_i2c_write_single>
      break;
 8000c76:	e01c      	b.n	8000cb2 <ds3231_set+0x1f2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 8000c78:	6839      	ldr	r1, [r7, #0]
 8000c7a:	200e      	movs	r0, #14
 8000c7c:	f000 f830 	bl	8000ce0 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 8000c80:	2107      	movs	r1, #7
 8000c82:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <ds3231_set+0x1fc>)
 8000c84:	f000 f8bb 	bl	8000dfe <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 8000c88:	2307      	movs	r3, #7
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cbc <ds3231_set+0x1fc>)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2068      	movs	r0, #104	@ 0x68
 8000c90:	f000 f91e 	bl	8000ed0 <time_i2c_write_multi>
      break;
 8000c94:	e00d      	b.n	8000cb2 <ds3231_set+0x1f2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <ds3231_set+0x21c>)
 8000c9c:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <ds3231_set+0x21c>)
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	2068      	movs	r0, #104	@ 0x68
 8000ca8:	f000 f8ee 	bl	8000e88 <time_i2c_write_single>
      break;
 8000cac:	e001      	b.n	8000cb2 <ds3231_set+0x1f2>
    default:
      return OPERATION_FAILED;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <ds3231_set+0x1f4>
  }
  return OPERATION_DONE;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000b4 	.word	0x200000b4
 8000cc0:	200000b5 	.word	0x200000b5
 8000cc4:	200000b6 	.word	0x200000b6
 8000cc8:	200000b7 	.word	0x200000b7
 8000ccc:	200000b8 	.word	0x200000b8
 8000cd0:	200000b9 	.word	0x200000b9
 8000cd4:	200000ba 	.word	0x200000ba
 8000cd8:	200000b0 	.word	0x200000b0
 8000cdc:	200000b1 	.word	0x200000b1

08000ce0 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b0e      	cmp	r3, #14
 8000cf0:	d006      	beq.n	8000d00 <ds3231_data_clone+0x20>
 8000cf2:	2b0e      	cmp	r3, #14
 8000cf4:	dc37      	bgt.n	8000d66 <ds3231_data_clone+0x86>
 8000cf6:	2b0a      	cmp	r3, #10
 8000cf8:	d013      	beq.n	8000d22 <ds3231_data_clone+0x42>
 8000cfa:	2b0b      	cmp	r3, #11
 8000cfc:	d022      	beq.n	8000d44 <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8000cfe:	e032      	b.n	8000d66 <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e009      	b.n	8000d1a <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	441a      	add	r2, r3
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	7811      	ldrb	r1, [r2, #0]
 8000d10:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <ds3231_data_clone+0x94>)
 8000d12:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	3301      	adds	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d9f2      	bls.n	8000d06 <ds3231_data_clone+0x26>
      break;
 8000d20:	e022      	b.n	8000d68 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	73bb      	strb	r3, [r7, #14]
 8000d26:	e009      	b.n	8000d3c <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	7811      	ldrb	r1, [r2, #0]
 8000d32:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <ds3231_data_clone+0x98>)
 8000d34:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	73bb      	strb	r3, [r7, #14]
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d9f2      	bls.n	8000d28 <ds3231_data_clone+0x48>
      break;
 8000d42:	e011      	b.n	8000d68 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	737b      	strb	r3, [r7, #13]
 8000d48:	e009      	b.n	8000d5e <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8000d4a:	7b7b      	ldrb	r3, [r7, #13]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	441a      	add	r2, r3
 8000d50:	7b7b      	ldrb	r3, [r7, #13]
 8000d52:	7811      	ldrb	r1, [r2, #0]
 8000d54:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <ds3231_data_clone+0x9c>)
 8000d56:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d9f2      	bls.n	8000d4a <ds3231_data_clone+0x6a>
      break;
 8000d64:	e000      	b.n	8000d68 <ds3231_data_clone+0x88>
      break;
 8000d66:	bf00      	nop
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	200000b4 	.word	0x200000b4
 8000d78:	200000bc 	.word	0x200000bc
 8000d7c:	200000c0 	.word	0x200000c0

08000d80 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e028      	b.n	8000de8 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	440b      	add	r3, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	4403      	add	r3, r0
 8000dd6:	440a      	add	r2, r1
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3b01      	subs	r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dad2      	bge.n	8000d96 <BCD_to_HEX+0x16>
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b085      	sub	sp, #20
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73bb      	strb	r3, [r7, #14]
 8000e12:	e02d      	b.n	8000e70 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000e18:	e00e      	b.n	8000e38 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	3310      	adds	r3, #16
 8000e1e:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8000e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	440b      	add	r3, r1
 8000e32:	3a0a      	subs	r2, #10
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	2b09      	cmp	r3, #9
 8000e46:	dce8      	bgt.n	8000e1a <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8000e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4413      	add	r3, r2
 8000e56:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8000e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	73bb      	strb	r3, [r7, #14]
 8000e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dacd      	bge.n	8000e14 <HEX_to_BCD+0x16>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <time_i2c_write_single>:
#include "stm32f4xx_hal.h"
#include "i2c.h"

/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t data_byte)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	460b      	mov	r3, r1
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	4613      	mov	r3, r2
 8000e98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, device_address, register_address, sizeof(register_address), 1000);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <time_i2c_write_single+0x44>)
 8000eac:	f001 fb26 	bl	80024fc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address, &data_byte, sizeof(data_byte), 1000);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	b299      	uxth	r1, r3
 8000eb4:	1d7a      	adds	r2, r7, #5
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <time_i2c_write_single+0x44>)
 8000ec0:	f001 fb1c 	bl	80024fc <HAL_I2C_Master_Transmit>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000c4 	.word	0x200000c4

08000ed0 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	603a      	str	r2, [r7, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < data_length; i++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e01c      	b.n	8000f26 <time_i2c_write_multi+0x56>
		HAL_I2C_Master_Transmit(&hi2c1, device_address, start_register_address+i, sizeof(start_register_address), 1000);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <time_i2c_write_multi+0x68>)
 8000f02:	f001 fafb 	bl	80024fc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, device_address, data_array, sizeof(data_array), 1000);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2304      	movs	r3, #4
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <time_i2c_write_multi+0x68>)
 8000f16:	f001 faf1 	bl	80024fc <HAL_I2C_Master_Transmit>
		data_array += 1;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < data_length; i++) {
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	797b      	ldrb	r3, [r7, #5]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbde      	blt.n	8000eec <time_i2c_write_multi+0x1c>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000c4 	.word	0x200000c4

08000f3c <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t data_byte)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	460b      	mov	r3, r1
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, device_address, register_address, sizeof(register_address), 1000);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <time_i2c_read_single+0x44>)
 8000f60:	f001 facc 	bl	80024fc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address, &data_byte, sizeof(data_byte), 1000);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	b299      	uxth	r1, r3
 8000f68:	1d7a      	adds	r2, r7, #5
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <time_i2c_read_single+0x44>)
 8000f74:	f001 fbc0 	bl	80026f8 <HAL_I2C_Master_Receive>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000c4 	.word	0x200000c4

08000f84 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	603a      	str	r2, [r7, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < data_length; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e01c      	b.n	8000fda <time_i2c_read_multi+0x56>
			HAL_I2C_Master_Transmit(&hi2c1, device_address, start_register_address+i, sizeof(start_register_address), 1000);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	79ba      	ldrb	r2, [r7, #6]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	461a      	mov	r2, r3
 8000fac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <time_i2c_read_multi+0x68>)
 8000fb6:	f001 faa1 	bl	80024fc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1, device_address, data_array, sizeof(data_array), 1000);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <time_i2c_read_multi+0x68>)
 8000fca:	f001 fb95 	bl	80026f8 <HAL_I2C_Master_Receive>
			data_array += 1;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < data_length; i++) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	797b      	ldrb	r3, [r7, #5]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	dbde      	blt.n	8000fa0 <time_i2c_read_multi+0x1c>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000c4 	.word	0x200000c4

08000ff0 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b5e      	ldr	r3, [pc, #376]	@ (8001194 <MX_GPIO_Init+0x194>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a5d      	ldr	r2, [pc, #372]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b5b      	ldr	r3, [pc, #364]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b57      	ldr	r3, [pc, #348]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a56      	ldr	r2, [pc, #344]	@ (8001194 <MX_GPIO_Init+0x194>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b54      	ldr	r3, [pc, #336]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b50      	ldr	r3, [pc, #320]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a4f      	ldr	r2, [pc, #316]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b49      	ldr	r3, [pc, #292]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a48      	ldr	r2, [pc, #288]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b46      	ldr	r3, [pc, #280]	@ (8001194 <MX_GPIO_Init+0x194>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <MX_GPIO_Init+0x194>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a41      	ldr	r2, [pc, #260]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b3f      	ldr	r3, [pc, #252]	@ (8001194 <MX_GPIO_Init+0x194>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001194 <MX_GPIO_Init+0x194>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001194 <MX_GPIO_Init+0x194>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <MX_GPIO_Init+0x194>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MK_Output_3_Pin|MK_Output_2_Pin|MK_Output_1_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2115      	movs	r1, #21
 80010c2:	4835      	ldr	r0, [pc, #212]	@ (8001198 <MX_GPIO_Init+0x198>)
 80010c4:	f001 f8a2 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2110      	movs	r1, #16
 80010cc:	4833      	ldr	r0, [pc, #204]	@ (800119c <MX_GPIO_Init+0x19c>)
 80010ce:	f001 f89d 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2110      	movs	r1, #16
 80010d6:	4832      	ldr	r0, [pc, #200]	@ (80011a0 <MX_GPIO_Init+0x1a0>)
 80010d8:	f001 f898 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80010e2:	4830      	ldr	r0, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0x1a4>)
 80010e4:	f001 f892 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MK_Input_4_Pin;
 80010e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MK_Input_4_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4828      	ldr	r0, [pc, #160]	@ (80011a0 <MX_GPIO_Init+0x1a0>)
 80010fe:	f000 fec1 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MK_Output_3_Pin|MK_Output_2_Pin|MK_Output_1_Pin;
 8001102:	2315      	movs	r3, #21
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481f      	ldr	r0, [pc, #124]	@ (8001198 <MX_GPIO_Init+0x198>)
 800111a:	f000 feb3 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MK_Input_3_Pin|MK_Input_2_Pin|MK_Input_1_Pin;
 800111e:	232a      	movs	r3, #42	@ 0x2a
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4819      	ldr	r0, [pc, #100]	@ (8001198 <MX_GPIO_Init+0x198>)
 8001132:	f000 fea7 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001136:	2310      	movs	r3, #16
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4813      	ldr	r0, [pc, #76]	@ (800119c <MX_GPIO_Init+0x19c>)
 800114e:	f000 fe99 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001152:	2310      	movs	r3, #16
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <MX_GPIO_Init+0x1a0>)
 800116a:	f000 fe8b 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800116e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <MX_GPIO_Init+0x1a4>)
 8001188:	f000 fe7c 	bl	8001e84 <HAL_GPIO_Init>

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	@ 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40021400 	.word	0x40021400
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40021800 	.word	0x40021800

080011a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_I2C1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_I2C1_Init+0x74>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <MX_I2C1_Init+0x7c>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_I2C1_Init+0x74>)
 80011c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <MX_I2C1_Init+0x74>)
 80011e6:	f001 f845 	bl	8002274 <HAL_I2C_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 fa60 	bl	80016b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f4:	2100      	movs	r1, #0
 80011f6:	4809      	ldr	r0, [pc, #36]	@ (800121c <MX_I2C1_Init+0x74>)
 80011f8:	f002 f836 	bl	8003268 <HAL_I2CEx_ConfigAnalogFilter>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001202:	f000 fa57 	bl	80016b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_I2C1_Init+0x74>)
 800120a:	f002 f869 	bl	80032e0 <HAL_I2CEx_ConfigDigitalFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001214:	f000 fa4e 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000c4 	.word	0x200000c4
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <HAL_I2C_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001266:	23c0      	movs	r3, #192	@ 0xc0
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <HAL_I2C_MspInit+0x8c>)
 8001282:	f000 fdff 	bl	8001e84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012bc:	f000 fba8 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c0:	f000 f842 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c4:	f7ff fe9c 	bl	8001000 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012c8:	f000 fafe 	bl	80018c8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80012cc:	f7ff ff6c 	bl	80011a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012d0:	f000 f9f6 	bl	80016c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // USART
  HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 80012d4:	2204      	movs	r2, #4
 80012d6:	4915      	ldr	r1, [pc, #84]	@ (800132c <main+0x74>)
 80012d8:	4815      	ldr	r0, [pc, #84]	@ (8001330 <main+0x78>)
 80012da:	f002 ff10 	bl	80040fe <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 1000);
 80012de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e2:	2264      	movs	r2, #100	@ 0x64
 80012e4:	4913      	ldr	r1, [pc, #76]	@ (8001334 <main+0x7c>)
 80012e6:	4812      	ldr	r0, [pc, #72]	@ (8001330 <main+0x78>)
 80012e8:	f002 fe7e 	bl	8003fe8 <HAL_UART_Transmit>
  //MFRC522_Init();
  //HAL_GPIO_WritePin(uSPI1_SS_GPIO_Port, uSPI1_SS_Pin, GPIO_PIN_SET);
  //HAL_SPI_Receive_IT(&hspi1, spi_RFID, sizeof(spi_RFID));

  // LED
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80012ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f0:	4811      	ldr	r0, [pc, #68]	@ (8001338 <main+0x80>)
 80012f2:	f000 ffa4 	bl	800223e <HAL_GPIO_TogglePin>

  // RTC
  ds3231_init(&time_set[0], CLOCK_HALT, FORCE_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	4810      	ldr	r0, [pc, #64]	@ (800133c <main+0x84>)
 80012fc:	f7ff f8ee 	bl	80004dc <ds3231_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (en_keypad == 1) {
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <main+0x88>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <main+0x54>
		  keypad_read();
 8001308:	f000 f87e 	bl	8001408 <keypad_read>
	  }
	  ds3231_read(TIME, time_current);
 800130c:	490d      	ldr	r1, [pc, #52]	@ (8001344 <main+0x8c>)
 800130e:	200e      	movs	r0, #14
 8001310:	f7ff fb02 	bl	8000918 <ds3231_read>
	  HAL_UART_Transmit(&huart1, time_current, sizeof(time_current), 1000);
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	2207      	movs	r2, #7
 800131a:	490a      	ldr	r1, [pc, #40]	@ (8001344 <main+0x8c>)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <main+0x78>)
 800131e:	f002 fe63 	bl	8003fe8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001326:	f000 fbe5 	bl	8001af4 <HAL_Delay>
	  if (en_keypad == 1) {
 800132a:	e7e9      	b.n	8001300 <main+0x48>
 800132c:	20000118 	.word	0x20000118
 8001330:	20000180 	.word	0x20000180
 8001334:	20000014 	.word	0x20000014
 8001338:	40021800 	.word	0x40021800
 800133c:	20000080 	.word	0x20000080
 8001340:	2000011c 	.word	0x2000011c
 8001344:	20000120 	.word	0x20000120

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	@ 0x50
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2230      	movs	r2, #48	@ 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fe4c 	bl	8004ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <SystemClock_Config+0xb8>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <SystemClock_Config+0xb8>)
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	@ 0x40
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <SystemClock_Config+0xb8>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <SystemClock_Config+0xbc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001394:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <SystemClock_Config+0xbc>)
 8001396:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <SystemClock_Config+0xbc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b0:	2310      	movs	r3, #16
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 ffcf 	bl	8003360 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013c8:	f000 f974 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fa32 	bl	8003850 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013f2:	f000 f95f 	bl	80016b4 <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3750      	adds	r7, #80	@ 0x50
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <keypad_read>:
	{
		HAL_UART_Transmit(&huart1, data_array[index], sizeof(data_array[index]), 1000);
	}
}

void keypad_read() {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b096      	sub	sp, #88	@ 0x58
 800140c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, MK_Output_2_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	4842      	ldr	r0, [pc, #264]	@ (800151c <keypad_read+0x114>)
 8001414:	f000 fefa 	bl	800220c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, MK_Output_3_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	483f      	ldr	r0, [pc, #252]	@ (800151c <keypad_read+0x114>)
 800141e:	f000 fef5 	bl	800220c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, MK_Output_1_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2110      	movs	r1, #16
 8001426:	483d      	ldr	r0, [pc, #244]	@ (800151c <keypad_read+0x114>)
 8001428:	f000 fef0 	bl	800220c <HAL_GPIO_WritePin>

	uint8_t pin[1] = "e";
 800142c:	2365      	movs	r3, #101	@ 0x65
 800142e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_1_Pin) == GPIO_PIN_SET)
 8001432:	2120      	movs	r1, #32
 8001434:	4839      	ldr	r0, [pc, #228]	@ (800151c <keypad_read+0x114>)
 8001436:	f000 fed1 	bl	80021dc <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d103      	bne.n	8001448 <keypad_read+0x40>
	{
		pin[0] = '1';
 8001440:	2331      	movs	r3, #49	@ 0x31
 8001442:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8001446:	e020      	b.n	800148a <keypad_read+0x82>
	} else
	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_2_Pin) == GPIO_PIN_SET)
 8001448:	2108      	movs	r1, #8
 800144a:	4834      	ldr	r0, [pc, #208]	@ (800151c <keypad_read+0x114>)
 800144c:	f000 fec6 	bl	80021dc <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	2b01      	cmp	r3, #1
 8001454:	d103      	bne.n	800145e <keypad_read+0x56>
	{
		pin[0] = '4';
 8001456:	2334      	movs	r3, #52	@ 0x34
 8001458:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800145c:	e015      	b.n	800148a <keypad_read+0x82>

	} else
	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_3_Pin) == GPIO_PIN_SET)
 800145e:	2102      	movs	r1, #2
 8001460:	482e      	ldr	r0, [pc, #184]	@ (800151c <keypad_read+0x114>)
 8001462:	f000 febb 	bl	80021dc <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d103      	bne.n	8001474 <keypad_read+0x6c>
	{
		pin[0] = '7';
 800146c:	2337      	movs	r3, #55	@ 0x37
 800146e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8001472:	e00a      	b.n	800148a <keypad_read+0x82>
	} else
	if (HAL_GPIO_ReadPin(MK_Input_4_GPIO_Port, MK_Input_4_Pin) == GPIO_PIN_SET)
 8001474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001478:	4829      	ldr	r0, [pc, #164]	@ (8001520 <keypad_read+0x118>)
 800147a:	f000 feaf 	bl	80021dc <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <keypad_read+0x82>
	{
		pin[0] = '*';
 8001484:	232a      	movs	r3, #42	@ 0x2a
 8001486:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	}

	if (pin[0] != 'e' && pin[0] != last_pin[0]) {
 800148a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800148e:	2b65      	cmp	r3, #101	@ 0x65
 8001490:	d03a      	beq.n	8001508 <keypad_read+0x100>
 8001492:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <keypad_read+0x11c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d034      	beq.n	8001508 <keypad_read+0x100>
		last_pin[0] = pin[0];
 800149e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <keypad_read+0x11c>)
 80014a4:	701a      	strb	r2, [r3, #0]
		uint8_t message[40] = ESCAPE_YELLOW "PIN: - " ESCAPE_WHITE;
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <keypad_read+0x120>)
 80014a8:	1d3c      	adds	r4, r7, #4
 80014aa:	461d      	mov	r5, r3
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	8023      	strh	r3, [r4, #0]
 80014b4:	f107 0316 	add.w	r3, r7, #22
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	829a      	strh	r2, [r3, #20]
		uint8_t messageEnd[40] = "\n\r";
 80014c6:	f640 530a 	movw	r3, #3338	@ 0xd0a
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014d0:	2224      	movs	r2, #36	@ 0x24
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fd8d 	bl	8004ff4 <memset>
		HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 80014da:	1d39      	adds	r1, r7, #4
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	2228      	movs	r2, #40	@ 0x28
 80014e2:	4812      	ldr	r0, [pc, #72]	@ (800152c <keypad_read+0x124>)
 80014e4:	f002 fd80 	bl	8003fe8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, pin, sizeof(pin), 1000);
 80014e8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80014ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f0:	2201      	movs	r2, #1
 80014f2:	480e      	ldr	r0, [pc, #56]	@ (800152c <keypad_read+0x124>)
 80014f4:	f002 fd78 	bl	8003fe8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, messageEnd, sizeof(messageEnd), 1000);
 80014f8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80014fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001500:	2228      	movs	r2, #40	@ 0x28
 8001502:	480a      	ldr	r0, [pc, #40]	@ (800152c <keypad_read+0x124>)
 8001504:	f002 fd70 	bl	8003fe8 <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(GPIOF, MK_Output_1_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	4803      	ldr	r0, [pc, #12]	@ (800151c <keypad_read+0x114>)
 800150e:	f000 fe7d 	bl	800220c <HAL_GPIO_WritePin>
	return;
 8001512:	bf00      	nop
}
 8001514:	3758      	adds	r7, #88	@ 0x58
 8001516:	46bd      	mov	sp, r7
 8001518:	bdb0      	pop	{r4, r5, r7, pc}
 800151a:	bf00      	nop
 800151c:	40021400 	.word	0x40021400
 8001520:	40020800 	.word	0x40020800
 8001524:	20000078 	.word	0x20000078
 8001528:	08005064 	.word	0x08005064
 800152c:	20000180 	.word	0x20000180

08001530 <toggleLED>:

void toggleLED() {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8001534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <toggleLED+0x1c>)
 800153a:	f000 fe80 	bl	800223e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800153e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001542:	4802      	ldr	r0, [pc, #8]	@ (800154c <toggleLED+0x1c>)
 8001544:	f000 fe7b 	bl	800223e <HAL_GPIO_TogglePin>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021800 	.word	0x40021800

08001550 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b0a0      	sub	sp, #128	@ 0x80
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	//COM
	HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 8001558:	2204      	movs	r2, #4
 800155a:	494e      	ldr	r1, [pc, #312]	@ (8001694 <HAL_UART_RxCpltCallback+0x144>)
 800155c:	484e      	ldr	r0, [pc, #312]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 800155e:	f002 fdce 	bl	80040fe <HAL_UART_Receive_IT>
	//HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 1000);

	uint8_t message[40] = ESCAPE_YELLOW "Interrupt - COM - " ESCAPE_WHITE __TIME__ "\n\r";
 8001562:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <HAL_UART_RxCpltCallback+0x14c>)
 8001564:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001568:	461d      	mov	r5, r3
 800156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001576:	6020      	str	r0, [r4, #0]
 8001578:	3404      	adds	r4, #4
 800157a:	8021      	strh	r1, [r4, #0]
 800157c:	3402      	adds	r4, #2
 800157e:	0c0b      	lsrs	r3, r1, #16
 8001580:	7023      	strb	r3, [r4, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8001588:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800158c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001590:	2228      	movs	r2, #40	@ 0x28
 8001592:	4841      	ldr	r0, [pc, #260]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 8001594:	f002 fd28 	bl	8003fe8 <HAL_UART_Transmit>

	int en_keypad_code = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for (int i = 0; i < 4; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015a0:	e00a      	b.n	80015b8 <HAL_UART_RxCpltCallback+0x68>
		if (rx_data[i] != '0') {
 80015a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001694 <HAL_UART_RxCpltCallback+0x144>)
 80015a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b30      	cmp	r3, #48	@ 0x30
 80015ac:	d001      	beq.n	80015b2 <HAL_UART_RxCpltCallback+0x62>
			en_keypad_code = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for (int i = 0; i < 4; i++) {
 80015b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015b4:	3301      	adds	r3, #1
 80015b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	ddf1      	ble.n	80015a2 <HAL_UART_RxCpltCallback+0x52>
		}
	}
	if (en_keypad_code == 1) {
 80015be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d11b      	bne.n	80015fc <HAL_UART_RxCpltCallback+0xac>
		if (en_keypad == 1) {
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d103      	bne.n	80015d4 <HAL_UART_RxCpltCallback+0x84>
			en_keypad = 0;
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e002      	b.n	80015da <HAL_UART_RxCpltCallback+0x8a>
		}
		else en_keypad = 1;
 80015d4:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		uint8_t response[20] = ESCAPE_GREEN "Keypad toggled\n\r";
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <HAL_UART_RxCpltCallback+0x154>)
 80015dc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, response, sizeof(response), 1000);
 80015ea:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	2214      	movs	r2, #20
 80015f4:	4828      	ldr	r0, [pc, #160]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 80015f6:	f002 fcf7 	bl	8003fe8 <HAL_UART_Transmit>
 80015fa:	e047      	b.n	800168c <HAL_UART_RxCpltCallback+0x13c>
		return;
	}

	int correctCode = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	677b      	str	r3, [r7, #116]	@ 0x74
	for (int i = 0; i < 4; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	673b      	str	r3, [r7, #112]	@ 0x70
 8001604:	e00e      	b.n	8001624 <HAL_UART_RxCpltCallback+0xd4>
		if (rx_data[i] != code[i]) {
 8001606:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <HAL_UART_RxCpltCallback+0x144>)
 8001608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800160a:	4413      	add	r3, r2
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	4926      	ldr	r1, [pc, #152]	@ (80016a8 <HAL_UART_RxCpltCallback+0x158>)
 8001610:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001612:	440b      	add	r3, r1
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_UART_RxCpltCallback+0xce>
			correctCode = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	677b      	str	r3, [r7, #116]	@ 0x74
	for (int i = 0; i < 4; i++) {
 800161e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001620:	3301      	adds	r3, #1
 8001622:	673b      	str	r3, [r7, #112]	@ 0x70
 8001624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001626:	2b03      	cmp	r3, #3
 8001628:	dded      	ble.n	8001606 <HAL_UART_RxCpltCallback+0xb6>
		}
	}

	if (correctCode == 1) {
 800162a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800162c:	2b01      	cmp	r3, #1
 800162e:	d118      	bne.n	8001662 <HAL_UART_RxCpltCallback+0x112>
		uint8_t response[20] = ESCAPE_GREEN "Correct\n\r";
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <HAL_UART_RxCpltCallback+0x15c>)
 8001632:	f107 0420 	add.w	r4, r7, #32
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	c407      	stmia	r4!, {r0, r1, r2}
 800163a:	8023      	strh	r3, [r4, #0]
 800163c:	3402      	adds	r4, #2
 800163e:	0c1b      	lsrs	r3, r3, #16
 8001640:	7023      	strb	r3, [r4, #0]
 8001642:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1, response, sizeof(response), 1000);
 800164c:	f107 0120 	add.w	r1, r7, #32
 8001650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001654:	2214      	movs	r2, #20
 8001656:	4810      	ldr	r0, [pc, #64]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 8001658:	f002 fcc6 	bl	8003fe8 <HAL_UART_Transmit>
		toggleLED();
 800165c:	f7ff ff68 	bl	8001530 <toggleLED>
 8001660:	e014      	b.n	800168c <HAL_UART_RxCpltCallback+0x13c>
	} else {
		uint8_t response[20] = ESCAPE_RED "Incorrect\n\r";
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <HAL_UART_RxCpltCallback+0x160>)
 8001664:	f107 040c 	add.w	r4, r7, #12
 8001668:	461d      	mov	r5, r3
 800166a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	7023      	strb	r3, [r4, #0]
 8001672:	f107 031d 	add.w	r3, r7, #29
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, response, sizeof(response), 1000);
 800167c:	f107 010c 	add.w	r1, r7, #12
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	2214      	movs	r2, #20
 8001686:	4804      	ldr	r0, [pc, #16]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 8001688:	f002 fcae 	bl	8003fe8 <HAL_UART_Transmit>

	}
}
 800168c:	3780      	adds	r7, #128	@ 0x80
 800168e:	46bd      	mov	sp, r7
 8001690:	bdb0      	pop	{r4, r5, r7, pc}
 8001692:	bf00      	nop
 8001694:	20000118 	.word	0x20000118
 8001698:	20000180 	.word	0x20000180
 800169c:	0800508c 	.word	0x0800508c
 80016a0:	2000011c 	.word	0x2000011c
 80016a4:	080050b4 	.word	0x080050b4
 80016a8:	2000007c 	.word	0x2000007c
 80016ac:	080050c8 	.word	0x080050c8
 80016b0:	080050dc 	.word	0x080050dc

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016c6:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <MX_SPI1_Init+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016f4:	2210      	movs	r2, #16
 80016f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_SPI1_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <MX_SPI1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_SPI1_Init+0x64>)
 800170c:	220a      	movs	r2, #10
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_SPI1_Init+0x64>)
 8001712:	f002 fa7d 	bl	8003c10 <HAL_SPI_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800171c:	f7ff ffca 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000128 	.word	0x20000128
 8001728:	40013000 	.word	0x40013000

0800172c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_SPI_MspInit+0x94>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d133      	bne.n	80017b6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <HAL_SPI_MspInit+0x98>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <HAL_SPI_MspInit+0x98>)
 8001758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_SPI_MspInit+0x98>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_SPI_MspInit+0x98>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <HAL_SPI_MspInit+0x98>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_SPI_MspInit+0x98>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001786:	23e0      	movs	r3, #224	@ 0xe0
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001796:	2305      	movs	r3, #5
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <HAL_SPI_MspInit+0x9c>)
 80017a2:	f000 fb6f 	bl	8001e84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2023      	movs	r0, #35	@ 0x23
 80017ac:	f000 faa1 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017b0:	2023      	movs	r0, #35	@ 0x23
 80017b2:	f000 faba 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	@ 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40013000 	.word	0x40013000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <HAL_MspInit+0x4c>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <HAL_MspInit+0x4c>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <UsageFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f91f 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <SPI1_IRQHandler+0x10>)
 8001882:	f002 fa4f 	bl	8003d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000128 	.word	0x20000128

08001890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <USART1_IRQHandler+0x10>)
 8001896:	f002 fc57 	bl	8004148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000180 	.word	0x20000180

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART1_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 8001900:	f002 fb22 	bl	8003f48 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f7ff fed3 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000180 	.word	0x20000180
 8001918:	40011000 	.word	0x40011000

0800191c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <HAL_UART_MspInit+0x94>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d134      	bne.n	80019a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001976:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001988:	2307      	movs	r3, #7
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <HAL_UART_MspInit+0x9c>)
 8001994:	f000 fa76 	bl	8001e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2025      	movs	r0, #37	@ 0x25
 800199e:	f000 f9a8 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019a2:	2025      	movs	r0, #37	@ 0x25
 80019a4:	f000 f9c1 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	@ 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c0:	f7ff ff70 	bl	80018a4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f003 fb0b 	bl	8005004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fc63 	bl	80012b8 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001a00:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8001a04:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001a08:	200001cc 	.word	0x200001cc

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f94f 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fec2 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f967 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f92f 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000088 	.word	0x20000088
 8001aac:	20000090 	.word	0x20000090
 8001ab0:	2000008c 	.word	0x2000008c

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000090 	.word	0x20000090
 8001ad8:	200001c8 	.word	0x200001c8

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200001c8 	.word	0x200001c8

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000090 	.word	0x20000090

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	@ (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff feb6 	bl	8001adc <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e052      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0216 	bic.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_DMA_Abort+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e013      	b.n	8001e0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fe7b 	bl	8001adc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d90c      	bls.n	8001e0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e4      	bne.n	8001de2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	223f      	movs	r2, #63	@ 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00c      	b.n	8001e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e177      	b.n	8002190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8166 	bne.w	800218a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80c0 	beq.w	800218a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b66      	ldr	r3, [pc, #408]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a65      	ldr	r2, [pc, #404]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a61      	ldr	r2, [pc, #388]	@ (80021ac <HAL_GPIO_Init+0x328>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a58      	ldr	r2, [pc, #352]	@ (80021b0 <HAL_GPIO_Init+0x32c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d037      	beq.n	80020c2 <HAL_GPIO_Init+0x23e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a57      	ldr	r2, [pc, #348]	@ (80021b4 <HAL_GPIO_Init+0x330>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d031      	beq.n	80020be <HAL_GPIO_Init+0x23a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a56      	ldr	r2, [pc, #344]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x236>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a55      	ldr	r2, [pc, #340]	@ (80021bc <HAL_GPIO_Init+0x338>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x232>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a54      	ldr	r2, [pc, #336]	@ (80021c0 <HAL_GPIO_Init+0x33c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x22e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a53      	ldr	r2, [pc, #332]	@ (80021c4 <HAL_GPIO_Init+0x340>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x22a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_GPIO_Init+0x344>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x226>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a51      	ldr	r2, [pc, #324]	@ (80021cc <HAL_GPIO_Init+0x348>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x222>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a50      	ldr	r2, [pc, #320]	@ (80021d0 <HAL_GPIO_Init+0x34c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x21e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	@ (80021d4 <HAL_GPIO_Init+0x350>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x21a>
 800209a:	2309      	movs	r3, #9
 800209c:	e012      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 800209e:	230a      	movs	r3, #10
 80020a0:	e010      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e00e      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	@ (80021ac <HAL_GPIO_Init+0x328>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a34      	ldr	r2, [pc, #208]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b32      	ldr	r3, [pc, #200]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a29      	ldr	r2, [pc, #164]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1f      	ldr	r2, [pc, #124]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <HAL_GPIO_Init+0x354>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f ae84 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	@ 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021800 	.word	0x40021800
 80021cc:	40021c00 	.word	0x40021c00
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40022400 	.word	0x40022400
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e001      	b.n	80021fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43d9      	mvns	r1, r3
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	400b      	ands	r3, r1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e12b      	b.n	80024de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe ffc4 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	@ 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d8:	f001 fc72 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a81      	ldr	r2, [pc, #516]	@ (80024e8 <HAL_I2C_Init+0x274>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d807      	bhi.n	80022f8 <HAL_I2C_Init+0x84>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a80      	ldr	r2, [pc, #512]	@ (80024ec <HAL_I2C_Init+0x278>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e006      	b.n	8002306 <HAL_I2C_Init+0x92>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a7d      	ldr	r2, [pc, #500]	@ (80024f0 <HAL_I2C_Init+0x27c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0e7      	b.n	80024de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a78      	ldr	r2, [pc, #480]	@ (80024f4 <HAL_I2C_Init+0x280>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a6a      	ldr	r2, [pc, #424]	@ (80024e8 <HAL_I2C_Init+0x274>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d802      	bhi.n	8002348 <HAL_I2C_Init+0xd4>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	e009      	b.n	800235c <HAL_I2C_Init+0xe8>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	4a69      	ldr	r2, [pc, #420]	@ (80024f8 <HAL_I2C_Init+0x284>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800236e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	495c      	ldr	r1, [pc, #368]	@ (80024e8 <HAL_I2C_Init+0x274>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d819      	bhi.n	80023b0 <HAL_I2C_Init+0x13c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e59      	subs	r1, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fbb1 f3f3 	udiv	r3, r1, r3
 800238a:	1c59      	adds	r1, r3, #1
 800238c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002390:	400b      	ands	r3, r1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_I2C_Init+0x138>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e59      	subs	r1, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	e051      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e04f      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <HAL_I2C_Init+0x168>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	e012      	b.n	8002402 <HAL_I2C_Init+0x18e>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	0099      	lsls	r1, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x196>
 8002406:	2301      	movs	r3, #1
 8002408:	e022      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10e      	bne.n	8002430 <HAL_I2C_Init+0x1bc>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e58      	subs	r0, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	440b      	add	r3, r1
 8002420:	fbb0 f3f3 	udiv	r3, r0, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	fbb0 f3f3 	udiv	r3, r0, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	6809      	ldr	r1, [r1, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800247e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6911      	ldr	r1, [r2, #16]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	000186a0 	.word	0x000186a0
 80024ec:	001e847f 	.word	0x001e847f
 80024f0:	003d08ff 	.word	0x003d08ff
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	10624dd3 	.word	0x10624dd3

080024fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	460b      	mov	r3, r1
 800250a:	817b      	strh	r3, [r7, #10]
 800250c:	4613      	mov	r3, r2
 800250e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff fae4 	bl	8001adc <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	f040 80e0 	bne.w	80026e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	4970      	ldr	r1, [pc, #448]	@ (80026f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fc64 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	e0d3      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2C_Master_Transmit+0x50>
 8002548:	2302      	movs	r3, #2
 800254a:	e0cc      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d007      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2221      	movs	r2, #33	@ 0x21
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2210      	movs	r2, #16
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	893a      	ldrh	r2, [r7, #8]
 80025a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 face 	bl	8002b5c <I2C_MasterRequestWrite>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e08d      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025e0:	e066      	b.n	80026b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6a39      	ldr	r1, [r7, #32]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fd22 	bl	8003030 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d107      	bne.n	800260a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b04      	cmp	r3, #4
 800264a:	d11b      	bne.n	8002684 <HAL_I2C_Master_Transmit+0x188>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d017      	beq.n	8002684 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6a39      	ldr	r1, [r7, #32]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fd19 	bl	80030c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	2b04      	cmp	r3, #4
 800269a:	d107      	bne.n	80026ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e01a      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d194      	bne.n	80025e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	00100002 	.word	0x00100002
 80026f4:	ffff0000 	.word	0xffff0000

080026f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	@ 0x30
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	460b      	mov	r3, r1
 8002706:	817b      	strh	r3, [r7, #10]
 8002708:	4613      	mov	r3, r2
 800270a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff f9e6 	bl	8001adc <HAL_GetTick>
 8002710:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	f040 8217 	bne.w	8002b4e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	497c      	ldr	r1, [pc, #496]	@ (800291c <HAL_I2C_Master_Receive+0x224>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb66 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e20a      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2C_Master_Receive+0x50>
 8002744:	2302      	movs	r3, #2
 8002746:	e203      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d007      	beq.n	800276e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2222      	movs	r2, #34	@ 0x22
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2210      	movs	r2, #16
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	893a      	ldrh	r2, [r7, #8]
 800279e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002920 <HAL_I2C_Master_Receive+0x228>)
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fa52 	bl	8002c60 <I2C_MasterRequestRead>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1c4      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d113      	bne.n	80027f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e198      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d11b      	bne.n	8002836 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e178      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283a:	2b02      	cmp	r3, #2
 800283c:	d11b      	bne.n	8002876 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800285c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	e158      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800289c:	e144      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	f200 80f1 	bhi.w	8002a8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d123      	bne.n	80028f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fc4b 	bl	8003150 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e145      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f6:	e117      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d14e      	bne.n	800299e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002906:	2200      	movs	r2, #0
 8002908:	4906      	ldr	r1, [pc, #24]	@ (8002924 <HAL_I2C_Master_Receive+0x22c>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa76 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e11a      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
 800291a:	bf00      	nop
 800291c:	00100002 	.word	0x00100002
 8002920:	ffff0000 	.word	0xffff0000
 8002924:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800299c:	e0c4      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	2200      	movs	r2, #0
 80029a6:	496c      	ldr	r1, [pc, #432]	@ (8002b58 <HAL_I2C_Master_Receive+0x460>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fa27 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0cb      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	4955      	ldr	r1, [pc, #340]	@ (8002b58 <HAL_I2C_Master_Receive+0x460>)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f9f9 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e09d      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a88:	e04e      	b.n	8002b28 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fb5e 	bl	8003150 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e058      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d124      	bne.n	8002b28 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f aeb6 	bne.w	800289e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	00010004 	.word	0x00010004

08002b5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d006      	beq.n	8002b86 <I2C_MasterRequestWrite+0x2a>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d003      	beq.n	8002b86 <I2C_MasterRequestWrite+0x2a>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b84:	d108      	bne.n	8002b98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e00b      	b.n	8002bb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	2b12      	cmp	r3, #18
 8002b9e:	d107      	bne.n	8002bb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f91d 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd6:	d103      	bne.n	8002be0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e035      	b.n	8002c50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bec:	d108      	bne.n	8002c00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	e01b      	b.n	8002c38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	11db      	asrs	r3, r3, #7
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0306 	and.w	r3, r3, #6
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f063 030f 	orn	r3, r3, #15
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	490e      	ldr	r1, [pc, #56]	@ (8002c58 <I2C_MasterRequestWrite+0xfc>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f966 	bl	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e010      	b.n	8002c50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4907      	ldr	r1, [pc, #28]	@ (8002c5c <I2C_MasterRequestWrite+0x100>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f956 	bl	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	00010008 	.word	0x00010008
 8002c5c:	00010002 	.word	0x00010002

08002c60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d006      	beq.n	8002c9a <I2C_MasterRequestRead+0x3a>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d003      	beq.n	8002c9a <I2C_MasterRequestRead+0x3a>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c98:	d108      	bne.n	8002cac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e00b      	b.n	8002cc4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	2b11      	cmp	r3, #17
 8002cb2:	d107      	bne.n	8002cc4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f893 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cea:	d103      	bne.n	8002cf4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e079      	b.n	8002dec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d00:	d108      	bne.n	8002d14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	611a      	str	r2, [r3, #16]
 8002d12:	e05f      	b.n	8002dd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d14:	897b      	ldrh	r3, [r7, #10]
 8002d16:	11db      	asrs	r3, r3, #7
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 0306 	and.w	r3, r3, #6
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f063 030f 	orn	r3, r3, #15
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4930      	ldr	r1, [pc, #192]	@ (8002df4 <I2C_MasterRequestRead+0x194>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f8dc 	bl	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e054      	b.n	8002dec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d42:	897b      	ldrh	r3, [r7, #10]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4929      	ldr	r1, [pc, #164]	@ (8002df8 <I2C_MasterRequestRead+0x198>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f8cc 	bl	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e044      	b.n	8002dec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f831 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dae:	d103      	bne.n	8002db8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e017      	b.n	8002dec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	11db      	asrs	r3, r3, #7
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0306 	and.w	r3, r3, #6
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f063 030e 	orn	r3, r3, #14
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4907      	ldr	r1, [pc, #28]	@ (8002df8 <I2C_MasterRequestRead+0x198>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f888 	bl	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	00010008 	.word	0x00010008
 8002df8:	00010002 	.word	0x00010002

08002dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0c:	e048      	b.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d044      	beq.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fe61 	bl	8001adc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d139      	bne.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10d      	bne.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	e00c      	b.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d116      	bne.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e023      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d10d      	bne.n	8002ec6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	e00c      	b.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d093      	beq.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efe:	e071      	b.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f0e:	d123      	bne.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	f043 0204 	orr.w	r2, r3, #4
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e067      	b.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d041      	beq.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe fdbc 	bl	8001adc <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d136      	bne.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10c      	bne.n	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e00b      	b.n	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e021      	b.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10c      	bne.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e00b      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4013      	ands	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f af6d 	bne.w	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800303c:	e034      	b.n	80030a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f8e3 	bl	800320a <I2C_IsAcknowledgeFailed>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e034      	b.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d028      	beq.n	80030a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7fe fd41 	bl	8001adc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d11d      	bne.n	80030a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003076:	2b80      	cmp	r3, #128	@ 0x80
 8003078:	d016      	beq.n	80030a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e007      	b.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d1c3      	bne.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030cc:	e034      	b.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f89b 	bl	800320a <I2C_IsAcknowledgeFailed>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e034      	b.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d028      	beq.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fcf9 	bl	8001adc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11d      	bne.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d016      	beq.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e007      	b.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d1c3      	bne.n	80030ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800315c:	e049      	b.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	d119      	bne.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0210 	mvn.w	r2, #16
 8003174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e030      	b.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a0:	f7fe fc9c 	bl	8001adc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c0:	2b40      	cmp	r3, #64	@ 0x40
 80031c2:	d016      	beq.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e007      	b.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fc:	2b40      	cmp	r3, #64	@ 0x40
 80031fe:	d1ae      	bne.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	d11b      	bne.n	800325a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800322a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	f043 0204 	orr.w	r2, r3, #4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	d129      	bne.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2224      	movs	r2, #36	@ 0x24
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0210 	bic.w	r2, r2, #16
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d12a      	bne.n	8003350 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2224      	movs	r2, #36	@ 0x24
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	f023 030f 	bic.w	r3, r3, #15
 8003320:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b29a      	uxth	r2, r3
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	4313      	orrs	r3, r2
 800332a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	89fa      	ldrh	r2, [r7, #14]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e267      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d075      	beq.n	800346a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	4b88      	ldr	r3, [pc, #544]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d00c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4b85      	ldr	r3, [pc, #532]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	2b08      	cmp	r3, #8
 8003394:	d112      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003396:	4b82      	ldr	r3, [pc, #520]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a2:	d10b      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	4b7e      	ldr	r3, [pc, #504]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d05b      	beq.n	8003468 <HAL_RCC_OscConfig+0x108>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d157      	bne.n	8003468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e242      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c4:	d106      	bne.n	80033d4 <HAL_RCC_OscConfig+0x74>
 80033c6:	4b76      	ldr	r3, [pc, #472]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a75      	ldr	r2, [pc, #468]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e01d      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x98>
 80033de:	4b70      	ldr	r3, [pc, #448]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6f      	ldr	r2, [pc, #444]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b6d      	ldr	r3, [pc, #436]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6c      	ldr	r2, [pc, #432]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033f8:	4b69      	ldr	r3, [pc, #420]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a68      	ldr	r2, [pc, #416]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b66      	ldr	r3, [pc, #408]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a65      	ldr	r2, [pc, #404]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800340e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe fb60 	bl	8001adc <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003420:	f7fe fb5c 	bl	8001adc <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	@ 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e207      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b5b      	ldr	r3, [pc, #364]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0xc0>
 800343e:	e014      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe fb4c 	bl	8001adc <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe fb48 	bl	8001adc <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	@ 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1f3      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	4b51      	ldr	r3, [pc, #324]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0xe8>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d063      	beq.n	800353e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	4b4a      	ldr	r3, [pc, #296]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348e:	4b44      	ldr	r3, [pc, #272]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x152>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e1c7      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e03a      	b.n	800353e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_OscConfig+0x244>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe fb01 	bl	8001adc <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034de:	f7fe fafd 	bl	8001adc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e1a8      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4925      	ldr	r1, [pc, #148]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003512:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <HAL_RCC_OscConfig+0x244>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fae0 	bl	8001adc <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe fadc 	bl	8001adc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e187      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d036      	beq.n	80035b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003552:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_RCC_OscConfig+0x248>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe fac0 	bl	8001adc <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003560:	f7fe fabc 	bl	8001adc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e167      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x200>
 800357e:	e01b      	b.n	80035b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003580:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <HAL_RCC_OscConfig+0x248>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fe faa9 	bl	8001adc <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	e00e      	b.n	80035ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358e:	f7fe faa5 	bl	8001adc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d907      	bls.n	80035ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e150      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	42470000 	.word	0x42470000
 80035a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	4b88      	ldr	r3, [pc, #544]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ea      	bne.n	800358e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8097 	beq.w	80036f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b81      	ldr	r3, [pc, #516]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b7d      	ldr	r3, [pc, #500]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	4a7c      	ldr	r2, [pc, #496]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e6:	4b7a      	ldr	r3, [pc, #488]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b77      	ldr	r3, [pc, #476]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b74      	ldr	r3, [pc, #464]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a73      	ldr	r2, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fe fa65 	bl	8001adc <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe fa61 	bl	8001adc <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e10c      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b6a      	ldr	r3, [pc, #424]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x2ea>
 800363c:	4b64      	ldr	r3, [pc, #400]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	4a63      	ldr	r2, [pc, #396]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6713      	str	r3, [r2, #112]	@ 0x70
 8003648:	e01c      	b.n	8003684 <HAL_RCC_OscConfig+0x324>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b05      	cmp	r3, #5
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x30c>
 8003652:	4b5f      	ldr	r3, [pc, #380]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003656:	4a5e      	ldr	r2, [pc, #376]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70
 800365e:	4b5c      	ldr	r3, [pc, #368]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	4a5b      	ldr	r2, [pc, #364]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	@ 0x70
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0x324>
 800366c:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	4a57      	ldr	r2, [pc, #348]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6713      	str	r3, [r2, #112]	@ 0x70
 8003678:	4b55      	ldr	r3, [pc, #340]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	4a54      	ldr	r2, [pc, #336]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800367e:	f023 0304 	bic.w	r3, r3, #4
 8003682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe fa26 	bl	8001adc <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe fa22 	bl	8001adc <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e0cb      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	4b49      	ldr	r3, [pc, #292]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ee      	beq.n	8003694 <HAL_RCC_OscConfig+0x334>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b8:	f7fe fa10 	bl	8001adc <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe fa0c 	bl	8001adc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0b5      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	4b3e      	ldr	r3, [pc, #248]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ee      	bne.n	80036c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	4a38      	ldr	r2, [pc, #224]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a1 	beq.w	8003840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036fe:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b08      	cmp	r3, #8
 8003708:	d05c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d141      	bne.n	8003796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	4b31      	ldr	r3, [pc, #196]	@ (80037d8 <HAL_RCC_OscConfig+0x478>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe f9e0 	bl	8001adc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe f9dc 	bl	8001adc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e087      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	491b      	ldr	r1, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x478>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe f9b5 	bl	8001adc <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe f9b1 	bl	8001adc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e05c      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x416>
 8003794:	e054      	b.n	8003840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <HAL_RCC_OscConfig+0x478>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f99e 	bl	8001adc <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f99a 	bl	8001adc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e045      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x444>
 80037c2:	e03d      	b.n	8003840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e038      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_RCC_OscConfig+0x4ec>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d028      	beq.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d121      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d11a      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	4293      	cmp	r3, r2
 8003816:	d111      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0cc      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b68      	ldr	r3, [pc, #416]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d90c      	bls.n	800388c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b65      	ldr	r3, [pc, #404]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a58      	ldr	r2, [pc, #352]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a52      	ldr	r2, [pc, #328]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d044      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d119      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d003      	beq.n	800390e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390a:	2b03      	cmp	r3, #3
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e067      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b37      	ldr	r3, [pc, #220]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4934      	ldr	r1, [pc, #208]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fe f8cc 	bl	8001adc <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe f8c8 	bl	8001adc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e04f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d20c      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 f821 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	490a      	ldr	r1, [pc, #40]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe f82c 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08005118 	.word	0x08005118
 8003a14:	20000088 	.word	0x20000088
 8003a18:	2000008c 	.word	0x2000008c

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a20:	b090      	sub	sp, #64	@ 0x40
 8003a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a28:	2300      	movs	r3, #0
 8003a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d00d      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x40>
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	f200 80a1 	bhi.w	8003b88 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a4e:	e09b      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b53      	ldr	r3, [pc, #332]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a52:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003a54:	e09b      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a56:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a5a:	e098      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a64:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a66:	4b4d      	ldr	r3, [pc, #308]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b4a      	ldr	r3, [pc, #296]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a84:	2100      	movs	r1, #0
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a88:	fb03 f201 	mul.w	r2, r3, r1
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	fb00 f303 	mul.w	r3, r0, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	4a43      	ldr	r2, [pc, #268]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a96:	fba0 1202 	umull	r1, r2, r0, r2
 8003a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa2:	4413      	add	r3, r2
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ab6:	f7fc fb99 	bl	80001ec <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4613      	mov	r3, r2
 8003ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac2:	e053      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac4:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	2200      	movs	r2, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	617a      	str	r2, [r7, #20]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ad6:	f04f 0b00 	mov.w	fp, #0
 8003ada:	4652      	mov	r2, sl
 8003adc:	465b      	mov	r3, fp
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aec:	0150      	lsls	r0, r2, #5
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	ebb2 080a 	subs.w	r8, r2, sl
 8003af6:	eb63 090b 	sbc.w	r9, r3, fp
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b0e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b12:	eb63 0509 	sbc.w	r5, r3, r9
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	00eb      	lsls	r3, r5, #3
 8003b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b24:	00e2      	lsls	r2, r4, #3
 8003b26:	4614      	mov	r4, r2
 8003b28:	461d      	mov	r5, r3
 8003b2a:	eb14 030a 	adds.w	r3, r4, sl
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	eb45 030b 	adc.w	r3, r5, fp
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b42:	4629      	mov	r1, r5
 8003b44:	028b      	lsls	r3, r1, #10
 8003b46:	4621      	mov	r1, r4
 8003b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	028a      	lsls	r2, r1, #10
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b56:	2200      	movs	r2, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	60fa      	str	r2, [r7, #12]
 8003b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b60:	f7fc fb44 	bl	80001ec <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	3301      	adds	r3, #1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003b7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3740      	adds	r7, #64	@ 0x40
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	017d7840 	.word	0x017d7840

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000088 	.word	0x20000088

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc4:	f7ff fff0 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0a9b      	lsrs	r3, r3, #10
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4903      	ldr	r1, [pc, #12]	@ (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08005128 	.word	0x08005128

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bec:	f7ff ffdc 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0b5b      	lsrs	r3, r3, #13
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08005128 	.word	0x08005128

08003c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07b      	b.n	8003d1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c32:	d009      	beq.n	8003c48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
 8003c3a:	e005      	b.n	8003c48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd fd62 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0104 	and.w	r1, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f003 0210 	and.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
    return;
 8003d62:	e0ce      	b.n	8003f02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_SPI_IRQHandler+0x5e>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
    return;
 8003d80:	e0bf      	b.n	8003f02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_SPI_IRQHandler+0x7e>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80b0 	beq.w	8003f02 <HAL_SPI_IRQHandler+0x1de>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80aa 	beq.w	8003f02 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d011      	beq.n	8003de8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	e00b      	b.n	8003e00 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
        return;
 8003dfe:	e080      	b.n	8003f02 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d014      	beq.n	8003e34 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e42:	f043 0208 	orr.w	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d04f      	beq.n	8003f00 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <HAL_SPI_IRQHandler+0x168>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d034      	beq.n	8003ef6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0203 	bic.w	r2, r2, #3
 8003e9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea8:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_SPI_IRQHandler+0x1e4>)
 8003eaa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fd ffc4 	bl	8001e3e <HAL_DMA_Abort_IT>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d016      	beq.n	8003efe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f08 <HAL_SPI_IRQHandler+0x1e4>)
 8003ed6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fd ffae 	bl	8001e3e <HAL_DMA_Abort_IT>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003ef4:	e003      	b.n	8003efe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f808 	bl	8003f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003efc:	e000      	b.n	8003f00 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003efe:	bf00      	nop
    return;
 8003f00:	bf00      	nop
  }
}
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	08003f21 	.word	0x08003f21

08003f0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ffe6 	bl	8003f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e042      	b.n	8003fe0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fcd4 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	@ 0x24
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fdbd 	bl	8004b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	@ 0x28
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d175      	bne.n	80040f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Transmit+0x2c>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e06e      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2221      	movs	r2, #33	@ 0x21
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004026:	f7fd fd59 	bl	8001adc <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d108      	bne.n	8004054 <HAL_UART_Transmit+0x6c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e003      	b.n	800405c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800405c:	e02e      	b.n	80040bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fb1f 	bl	80046ac <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e03a      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3302      	adds	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e007      	b.n	80040ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3301      	adds	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1cb      	bne.n	800405e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2140      	movs	r1, #64	@ 0x40
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 faeb 	bl	80046ac <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	4613      	mov	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b20      	cmp	r3, #32
 8004116:	d112      	bne.n	800413e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_UART_Receive_IT+0x26>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e00b      	b.n	8004140 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	461a      	mov	r2, r3
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fb12 	bl	800475e <UART_Start_Receive_IT>
 800413a:	4603      	mov	r3, r0
 800413c:	e000      	b.n	8004140 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b0ba      	sub	sp, #232	@ 0xe8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_UART_IRQHandler+0x66>
 800419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fbf2 	bl	8004990 <UART_Receive_IT>
      return;
 80041ac:	e25b      	b.n	8004666 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80de 	beq.w	8004374 <HAL_UART_IRQHandler+0x22c>
 80041b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80d1 	beq.w	8004374 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_UART_IRQHandler+0xae>
 80041de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <HAL_UART_IRQHandler+0xd2>
 8004202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	f043 0202 	orr.w	r2, r3, #2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_UART_IRQHandler+0xf6>
 8004226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	f043 0204 	orr.w	r2, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800423e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d011      	beq.n	800426e <HAL_UART_IRQHandler+0x126>
 800424a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d105      	bne.n	8004262 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f043 0208 	orr.w	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 81f2 	beq.w	800465c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_UART_IRQHandler+0x14e>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb7d 	bl	8004990 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_UART_IRQHandler+0x17a>
 80042ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d04f      	beq.n	8004362 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa85 	bl	80047d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d2:	2b40      	cmp	r3, #64	@ 0x40
 80042d4:	d141      	bne.n	800435a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004302:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800430e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800431a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1d9      	bne.n	80042d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432e:	4a7e      	ldr	r2, [pc, #504]	@ (8004528 <HAL_UART_IRQHandler+0x3e0>)
 8004330:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fd81 	bl	8001e3e <HAL_DMA_Abort_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800434c:	4610      	mov	r0, r2
 800434e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	e00e      	b.n	8004370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f994 	bl	8004680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	e00a      	b.n	8004370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f990 	bl	8004680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	e006      	b.n	8004370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f98c 	bl	8004680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800436e:	e175      	b.n	800465c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	bf00      	nop
    return;
 8004372:	e173      	b.n	800465c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 814f 	bne.w	800461c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8148 	beq.w	800461c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8141 	beq.w	800461c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	f040 80b6 	bne.w	800452c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8145 	beq.w	8004660 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043de:	429a      	cmp	r2, r3
 80043e0:	f080 813e 	bcs.w	8004660 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f6:	f000 8088 	beq.w	800450a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004410:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004418:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800442a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800443e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1d9      	bne.n	80043fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3314      	adds	r3, #20
 8004466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800446a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800446e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004472:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800447c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e1      	bne.n	8004446 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e3      	bne.n	8004482 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044da:	f023 0310 	bic.w	r3, r3, #16
 80044de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e3      	bne.n	80044c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	4618      	mov	r0, r3
 8004506:	f7fd fc2a 	bl	8001d5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004518:	b29b      	uxth	r3, r3
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	b29b      	uxth	r3, r3
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8b7 	bl	8004694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004526:	e09b      	b.n	8004660 <HAL_UART_IRQHandler+0x518>
 8004528:	08004899 	.word	0x08004899
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004534:	b29b      	uxth	r3, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 808e 	beq.w	8004664 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8089 	beq.w	8004664 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004576:	647a      	str	r2, [r7, #68]	@ 0x44
 8004578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800457c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e3      	bne.n	8004552 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	623b      	str	r3, [r7, #32]
   return(result);
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e3      	bne.n	800458a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0310 	bic.w	r3, r3, #16
 80045e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045f4:	61fa      	str	r2, [r7, #28]
 80045f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	617b      	str	r3, [r7, #20]
   return(result);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e3      	bne.n	80045d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800460e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f83d 	bl	8004694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800461a:	e023      	b.n	8004664 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_UART_IRQHandler+0x4f4>
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800462c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f943 	bl	80048c0 <UART_Transmit_IT>
    return;
 800463a:	e014      	b.n	8004666 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800463c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <HAL_UART_IRQHandler+0x51e>
 8004648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f983 	bl	8004960 <UART_EndTransmit_IT>
    return;
 800465a:	e004      	b.n	8004666 <HAL_UART_IRQHandler+0x51e>
    return;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <HAL_UART_IRQHandler+0x51e>
      return;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_UART_IRQHandler+0x51e>
      return;
 8004664:	bf00      	nop
  }
}
 8004666:	37e8      	adds	r7, #232	@ 0xe8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046bc:	e03b      	b.n	8004736 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d037      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fd fa09 	bl	8001adc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d302      	bcc.n	80046dc <UART_WaitOnFlagUntilTimeout+0x30>
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e03a      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d023      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b80      	cmp	r3, #128	@ 0x80
 80046f2:	d020      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b40      	cmp	r3, #64	@ 0x40
 80046f8:	d01d      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b08      	cmp	r3, #8
 8004706:	d116      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f857 	bl	80047d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2208      	movs	r2, #8
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00f      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	429a      	cmp	r2, r3
 8004752:	d0b4      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	4613      	mov	r3, r2
 800476a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2222      	movs	r2, #34	@ 0x22
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0220 	orr.w	r2, r2, #32
 80047c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b095      	sub	sp, #84	@ 0x54
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80047fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	61fb      	str	r3, [r7, #28]
   return(result);
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800482e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004846:	2b01      	cmp	r3, #1
 8004848:	d119      	bne.n	800487e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	60bb      	str	r3, [r7, #8]
   return(result);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f023 0310 	bic.w	r3, r3, #16
 8004860:	647b      	str	r3, [r7, #68]	@ 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800486a:	61ba      	str	r2, [r7, #24]
 800486c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6979      	ldr	r1, [r7, #20]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	613b      	str	r3, [r7, #16]
   return(result);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e5      	bne.n	800484a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800488c:	bf00      	nop
 800488e:	3754      	adds	r7, #84	@ 0x54
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fee4 	bl	8004680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b21      	cmp	r3, #33	@ 0x21
 80048d2:	d13e      	bne.n	8004952 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048dc:	d114      	bne.n	8004908 <UART_Transmit_IT+0x48>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d110      	bne.n	8004908 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	621a      	str	r2, [r3, #32]
 8004906:	e008      	b.n	800491a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	1c59      	adds	r1, r3, #1
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6211      	str	r1, [r2, #32]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29b      	uxth	r3, r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	4619      	mov	r1, r3
 8004928:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800493c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800494c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004976:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fe73 	bl	800466c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	@ 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b22      	cmp	r3, #34	@ 0x22
 80049a2:	f040 80ae 	bne.w	8004b02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ae:	d117      	bne.n	80049e0 <UART_Receive_IT+0x50>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d113      	bne.n	80049e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	1c9a      	adds	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80049de:	e026      	b.n	8004a2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f2:	d007      	beq.n	8004a04 <UART_Receive_IT+0x74>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <UART_Receive_IT+0x82>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e008      	b.n	8004a24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d15d      	bne.n	8004afe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0220 	bic.w	r2, r2, #32
 8004a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d135      	bne.n	8004af4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f023 0310 	bic.w	r3, r3, #16
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	623a      	str	r2, [r7, #32]
 8004ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d10a      	bne.n	8004ae6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fdd1 	bl	8004694 <HAL_UARTEx_RxEventCallback>
 8004af2:	e002      	b.n	8004afa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc fd2b 	bl	8001550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e002      	b.n	8004b04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3730      	adds	r7, #48	@ 0x30
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b10:	b0c0      	sub	sp, #256	@ 0x100
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	68d9      	ldr	r1, [r3, #12]
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	ea40 0301 	orr.w	r3, r0, r1
 8004b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b64:	f021 010c 	bic.w	r1, r1, #12
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b72:	430b      	orrs	r3, r1
 8004b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	ea40 0301 	orr.w	r3, r0, r1
 8004b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d005      	beq.n	8004bac <UART_SetConfig+0xa0>
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8004ddc <UART_SetConfig+0x2d0>)
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d104      	bne.n	8004bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7ff f81c 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bb4:	e003      	b.n	8004bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bb6:	f7ff f803 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004bba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc8:	f040 810c 	bne.w	8004de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004be6:	415b      	adcs	r3, r3
 8004be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bee:	4621      	mov	r1, r4
 8004bf0:	eb12 0801 	adds.w	r8, r2, r1
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb43 0901 	adc.w	r9, r3, r1
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0e:	4690      	mov	r8, r2
 8004c10:	4699      	mov	r9, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	eb18 0303 	adds.w	r3, r8, r3
 8004c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	eb49 0303 	adc.w	r3, r9, r3
 8004c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	18db      	adds	r3, r3, r3
 8004c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c40:	4613      	mov	r3, r2
 8004c42:	eb42 0303 	adc.w	r3, r2, r3
 8004c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c50:	f7fb facc 	bl	80001ec <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4b61      	ldr	r3, [pc, #388]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	011c      	lsls	r4, r3, #4
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c84:	4641      	mov	r1, r8
 8004c86:	eb12 0a01 	adds.w	sl, r2, r1
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca4:	4692      	mov	sl, r2
 8004ca6:	469b      	mov	fp, r3
 8004ca8:	4643      	mov	r3, r8
 8004caa:	eb1a 0303 	adds.w	r3, sl, r3
 8004cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	18db      	adds	r3, r3, r3
 8004cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	eb42 0303 	adc.w	r3, r2, r3
 8004cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ce6:	f7fb fa81 	bl	80001ec <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2264      	movs	r2, #100	@ 0x64
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	1acb      	subs	r3, r1, r3
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d06:	4b36      	ldr	r3, [pc, #216]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004d08:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d14:	441c      	add	r4, r3
 8004d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	1891      	adds	r1, r2, r2
 8004d2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d30:	415b      	adcs	r3, r3
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d38:	4641      	mov	r1, r8
 8004d3a:	1851      	adds	r1, r2, r1
 8004d3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d3e:	4649      	mov	r1, r9
 8004d40:	414b      	adcs	r3, r1
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d50:	4659      	mov	r1, fp
 8004d52:	00cb      	lsls	r3, r1, #3
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	00ca      	lsls	r2, r1, #3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	4642      	mov	r2, r8
 8004d66:	189b      	adds	r3, r3, r2
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	460a      	mov	r2, r1
 8004d70:	eb42 0303 	adc.w	r3, r2, r3
 8004d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	18db      	adds	r3, r3, r3
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d92:	4613      	mov	r3, r2
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004da2:	f7fb fa23 	bl	80001ec <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004dac:	fba3 1302 	umull	r1, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	2164      	movs	r1, #100	@ 0x64
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	3332      	adds	r3, #50	@ 0x32
 8004dbe:	4a08      	ldr	r2, [pc, #32]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f003 0207 	and.w	r2, r3, #7
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4422      	add	r2, r4
 8004dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dd4:	e106      	b.n	8004fe4 <UART_SetConfig+0x4d8>
 8004dd6:	bf00      	nop
 8004dd8:	40011000 	.word	0x40011000
 8004ddc:	40011400 	.word	0x40011400
 8004de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004df6:	4642      	mov	r2, r8
 8004df8:	464b      	mov	r3, r9
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	6239      	str	r1, [r7, #32]
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e06:	4641      	mov	r1, r8
 8004e08:	1854      	adds	r4, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb43 0501 	adc.w	r5, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	00eb      	lsls	r3, r5, #3
 8004e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1e:	00e2      	lsls	r2, r4, #3
 8004e20:	4614      	mov	r4, r2
 8004e22:	461d      	mov	r5, r3
 8004e24:	4643      	mov	r3, r8
 8004e26:	18e3      	adds	r3, r4, r3
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	eb45 0303 	adc.w	r3, r5, r3
 8004e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e52:	4629      	mov	r1, r5
 8004e54:	008b      	lsls	r3, r1, #2
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	008a      	lsls	r2, r1, #2
 8004e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e64:	f7fb f9c2 	bl	80001ec <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b60      	ldr	r3, [pc, #384]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	011c      	lsls	r4, r3, #4
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	61b9      	str	r1, [r7, #24]
 8004e90:	415b      	adcs	r3, r3
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e98:	4641      	mov	r1, r8
 8004e9a:	1851      	adds	r1, r2, r1
 8004e9c:	6139      	str	r1, [r7, #16]
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	00cb      	lsls	r3, r1, #3
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eba:	4651      	mov	r1, sl
 8004ebc:	00ca      	lsls	r2, r1, #3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ecc:	464b      	mov	r3, r9
 8004ece:	460a      	mov	r2, r1
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	008b      	lsls	r3, r1, #2
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efa:	4641      	mov	r1, r8
 8004efc:	008a      	lsls	r2, r1, #2
 8004efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f02:	f7fb f973 	bl	80001ec <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4b38      	ldr	r3, [pc, #224]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2264      	movs	r2, #100	@ 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	3332      	adds	r3, #50	@ 0x32
 8004f20:	4a33      	ldr	r2, [pc, #204]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f36:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	415b      	adcs	r3, r3
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	1851      	adds	r1, r2, r1
 8004f50:	6039      	str	r1, [r7, #0]
 8004f52:	4649      	mov	r1, r9
 8004f54:	414b      	adcs	r3, r1
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f64:	4659      	mov	r1, fp
 8004f66:	00cb      	lsls	r3, r1, #3
 8004f68:	4651      	mov	r1, sl
 8004f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f6e:	4651      	mov	r1, sl
 8004f70:	00ca      	lsls	r2, r1, #3
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	4642      	mov	r2, r8
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f7e:	464b      	mov	r3, r9
 8004f80:	460a      	mov	r2, r1
 8004f82:	eb42 0303 	adc.w	r3, r2, r3
 8004f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f92:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	008b      	lsls	r3, r1, #2
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004faa:	4641      	mov	r1, r8
 8004fac:	008a      	lsls	r2, r1, #2
 8004fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fb2:	f7fb f91b 	bl	80001ec <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2164      	movs	r1, #100	@ 0x64
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	3332      	adds	r3, #50	@ 0x32
 8004fce:	4a08      	ldr	r2, [pc, #32]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4422      	add	r2, r4
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fea:	46bd      	mov	sp, r7
 8004fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff0:	51eb851f 	.word	0x51eb851f

08004ff4 <memset>:
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <memset+0xa>
 8004ffc:	4770      	bx	lr
 8004ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8005002:	e7f9      	b.n	8004ff8 <memset+0x4>

08005004 <__libc_init_array>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4d0d      	ldr	r5, [pc, #52]	@ (800503c <__libc_init_array+0x38>)
 8005008:	4c0d      	ldr	r4, [pc, #52]	@ (8005040 <__libc_init_array+0x3c>)
 800500a:	1b64      	subs	r4, r4, r5
 800500c:	10a4      	asrs	r4, r4, #2
 800500e:	2600      	movs	r6, #0
 8005010:	42a6      	cmp	r6, r4
 8005012:	d109      	bne.n	8005028 <__libc_init_array+0x24>
 8005014:	4d0b      	ldr	r5, [pc, #44]	@ (8005044 <__libc_init_array+0x40>)
 8005016:	4c0c      	ldr	r4, [pc, #48]	@ (8005048 <__libc_init_array+0x44>)
 8005018:	f000 f818 	bl	800504c <_init>
 800501c:	1b64      	subs	r4, r4, r5
 800501e:	10a4      	asrs	r4, r4, #2
 8005020:	2600      	movs	r6, #0
 8005022:	42a6      	cmp	r6, r4
 8005024:	d105      	bne.n	8005032 <__libc_init_array+0x2e>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	f855 3b04 	ldr.w	r3, [r5], #4
 800502c:	4798      	blx	r3
 800502e:	3601      	adds	r6, #1
 8005030:	e7ee      	b.n	8005010 <__libc_init_array+0xc>
 8005032:	f855 3b04 	ldr.w	r3, [r5], #4
 8005036:	4798      	blx	r3
 8005038:	3601      	adds	r6, #1
 800503a:	e7f2      	b.n	8005022 <__libc_init_array+0x1e>
 800503c:	08005138 	.word	0x08005138
 8005040:	08005138 	.word	0x08005138
 8005044:	08005138 	.word	0x08005138
 8005048:	0800513c 	.word	0x0800513c

0800504c <_init>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr

08005058 <_fini>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr
