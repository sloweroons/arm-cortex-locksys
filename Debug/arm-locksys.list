
arm-locksys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800367c  0800367c  0000467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00005034  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  00005034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003790  08003790  00004790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08003794  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005034  2**0
                  CONTENTS
 10 .bss          00000118  20000034  20000034  00005034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00005034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e64c  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a4  00000000  00000000  000136b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  00015a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000967  00000000  00000000  00016670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002306a  00000000  00000000  00016fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011574  00000000  00000000  0003a041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d250e  00000000  00000000  0004b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011dac3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003160  00000000  00000000  0011db08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00120c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003664 	.word	0x08003664

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08003664 	.word	0x08003664

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	@ 0x30
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
 80004f6:	4b5e      	ldr	r3, [pc, #376]	@ (8000670 <MX_GPIO_Init+0x194>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a5d      	ldr	r2, [pc, #372]	@ (8000670 <MX_GPIO_Init+0x194>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	4b5b      	ldr	r3, [pc, #364]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	61bb      	str	r3, [r7, #24]
 800050c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	4b57      	ldr	r3, [pc, #348]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	4a56      	ldr	r2, [pc, #344]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000518:	f043 0320 	orr.w	r3, r3, #32
 800051c:	6313      	str	r3, [r2, #48]	@ 0x30
 800051e:	4b54      	ldr	r3, [pc, #336]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	f003 0320 	and.w	r3, r3, #32
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a4f      	ldr	r2, [pc, #316]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b4d      	ldr	r3, [pc, #308]	@ (8000670 <MX_GPIO_Init+0x194>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <MX_GPIO_Init+0x194>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a48      	ldr	r2, [pc, #288]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b46      	ldr	r3, [pc, #280]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a41      	ldr	r2, [pc, #260]	@ (8000670 <MX_GPIO_Init+0x194>)
 800056c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b3f      	ldr	r3, [pc, #252]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a3a      	ldr	r2, [pc, #232]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b38      	ldr	r3, [pc, #224]	@ (8000670 <MX_GPIO_Init+0x194>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MK_Output_3_Pin|MK_Output_2_Pin|MK_Output_1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2115      	movs	r1, #21
 800059e:	4835      	ldr	r0, [pc, #212]	@ (8000674 <MX_GPIO_Init+0x198>)
 80005a0:	f000 fff6 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	4833      	ldr	r0, [pc, #204]	@ (8000678 <MX_GPIO_Init+0x19c>)
 80005aa:	f000 fff1 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	4832      	ldr	r0, [pc, #200]	@ (800067c <MX_GPIO_Init+0x1a0>)
 80005b4:	f000 ffec 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80005be:	4830      	ldr	r0, [pc, #192]	@ (8000680 <MX_GPIO_Init+0x1a4>)
 80005c0:	f000 ffe6 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MK_Input_4_Pin;
 80005c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MK_Input_4_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4828      	ldr	r0, [pc, #160]	@ (800067c <MX_GPIO_Init+0x1a0>)
 80005da:	f000 fe15 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MK_Output_3_Pin|MK_Output_2_Pin|MK_Output_1_Pin;
 80005de:	2315      	movs	r3, #21
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	481f      	ldr	r0, [pc, #124]	@ (8000674 <MX_GPIO_Init+0x198>)
 80005f6:	f000 fe07 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MK_Input_3_Pin|MK_Input_2_Pin|MK_Input_1_Pin;
 80005fa:	232a      	movs	r3, #42	@ 0x2a
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4819      	ldr	r0, [pc, #100]	@ (8000674 <MX_GPIO_Init+0x198>)
 800060e:	f000 fdfb 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000612:	2310      	movs	r3, #16
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4813      	ldr	r0, [pc, #76]	@ (8000678 <MX_GPIO_Init+0x19c>)
 800062a:	f000 fded 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800062e:	2310      	movs	r3, #16
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_GPIO_Init+0x1a0>)
 8000646:	f000 fddf 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800064a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <MX_GPIO_Init+0x1a4>)
 8000664:	f000 fdd0 	bl	8001208 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	@ 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40021400 	.word	0x40021400
 8000678:	40020000 	.word	0x40020000
 800067c:	40020800 	.word	0x40020800
 8000680:	40021800 	.word	0x40021800

08000684 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C1_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C1_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006c2:	f000 ff99 	bl	80015f8 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f9d8 	bl	8000a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006d4:	f001 f8d4 	bl	8001880 <HAL_I2CEx_ConfigAnalogFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 f9cf 	bl	8000a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006e6:	f001 f907 	bl	80018f8 <HAL_I2CEx_ConfigDigitalFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 f9c6 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000050 	.word	0x20000050
 80006fc:	40005400 	.word	0x40005400
 8000700:	000186a0 	.word	0x000186a0

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	@ (8000788 <HAL_I2C_MspInit+0x84>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d12b      	bne.n	800077e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <HAL_I2C_MspInit+0x88>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000742:	23c0      	movs	r3, #192	@ 0xc0
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000746:	2312      	movs	r3, #18
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000752:	2304      	movs	r3, #4
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <HAL_I2C_MspInit+0x8c>)
 800075e:	f000 fd53 	bl	8001208 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_I2C_MspInit+0x88>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_I2C_MspInit+0x88>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	@ 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40005400 	.word	0x40005400
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fb20 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f824 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff fe9c 	bl	80004dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a4:	f000 fa76 	bl	8000c94 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80007a8:	f7ff ff6c 	bl	8000684 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007ac:	f000 f96e 	bl	8000a8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // USART
  HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 80007b0:	2201      	movs	r2, #1
 80007b2:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <main+0x44>)
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <main+0x48>)
 80007b6:	f001 ffae 	bl	8002716 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 1000);
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	2228      	movs	r2, #40	@ 0x28
 80007c0:	4907      	ldr	r1, [pc, #28]	@ (80007e0 <main+0x4c>)
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <main+0x48>)
 80007c4:	f001 ff1c 	bl	8002600 <HAL_UART_Transmit>
  //MFRC522_Init();
  //HAL_GPIO_WritePin(uSPI1_SS_GPIO_Port, uSPI1_SS_Pin, GPIO_PIN_SET);
  //HAL_SPI_Receive_IT(&hspi1, spi_RFID, sizeof(spi_RFID));

  // LED
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80007c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <main+0x50>)
 80007ce:	f000 fef8 	bl	80015c2 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  keypadLogic();
 80007d2:	f000 f869 	bl	80008a8 <keypadLogic>
 80007d6:	e7fc      	b.n	80007d2 <main+0x3e>
 80007d8:	200000a4 	.word	0x200000a4
 80007dc:	20000100 	.word	0x20000100
 80007e0:	20000000 	.word	0x20000000
 80007e4:	40021800 	.word	0x40021800

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	@ 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 ff08 	bl	800360c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <SystemClock_Config+0xb8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a22      	ldr	r2, [pc, #136]	@ (80008a0 <SystemClock_Config+0xb8>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	@ 0x40
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <SystemClock_Config+0xb8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <SystemClock_Config+0xbc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <SystemClock_Config+0xbc>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <SystemClock_Config+0xbc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f88b 	bl	8001978 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000868:	f000 f90a 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f001 faee 	bl	8001e68 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000892:	f000 f8f5 	bl	8000a80 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	@ 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <keypadLogic>:

/* USER CODE BEGIN 4 */
void keypadLogic() {
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, MK_Output_3_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2101      	movs	r1, #1
 80008b2:	484f      	ldr	r0, [pc, #316]	@ (80009f0 <keypadLogic+0x148>)
 80008b4:	f000 fe6c 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, MK_Output_2_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	484c      	ldr	r0, [pc, #304]	@ (80009f0 <keypadLogic+0x148>)
 80008be:	f000 fe67 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, MK_Output_1_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2110      	movs	r1, #16
 80008c6:	484a      	ldr	r0, [pc, #296]	@ (80009f0 <keypadLogic+0x148>)
 80008c8:	f000 fe62 	bl	8001590 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_1_Pin) == GPIO_PIN_SET)
 80008cc:	2120      	movs	r1, #32
 80008ce:	4848      	ldr	r0, [pc, #288]	@ (80009f0 <keypadLogic+0x148>)
 80008d0:	f000 fe46 	bl	8001560 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d11a      	bne.n	8000910 <keypadLogic+0x68>
	{
		uint8_t message[40] = ESCAPE_YELLOW "PIN: - " ESCAPE_WHITE "1\n\r";
 80008da:	4b46      	ldr	r3, [pc, #280]	@ (80009f4 <keypadLogic+0x14c>)
 80008dc:	463c      	mov	r4, r7
 80008de:	461d      	mov	r5, r3
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008e8:	6020      	str	r0, [r4, #0]
 80008ea:	3404      	adds	r4, #4
 80008ec:	7021      	strb	r1, [r4, #0]
 80008ee:	f107 0315 	add.w	r3, r7, #21
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	f8c3 200f 	str.w	r2, [r3, #15]
		HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8000900:	4639      	mov	r1, r7
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	2228      	movs	r2, #40	@ 0x28
 8000908:	483b      	ldr	r0, [pc, #236]	@ (80009f8 <keypadLogic+0x150>)
 800090a:	f001 fe79 	bl	8002600 <HAL_UART_Transmit>
 800090e:	e065      	b.n	80009dc <keypadLogic+0x134>
	} else
	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_2_Pin) == GPIO_PIN_SET)
 8000910:	2108      	movs	r1, #8
 8000912:	4837      	ldr	r0, [pc, #220]	@ (80009f0 <keypadLogic+0x148>)
 8000914:	f000 fe24 	bl	8001560 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d11a      	bne.n	8000954 <keypadLogic+0xac>
	{
		uint8_t message[40] = ESCAPE_YELLOW "PIN: - " ESCAPE_WHITE "4\n\r";
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <keypadLogic+0x154>)
 8000920:	463c      	mov	r4, r7
 8000922:	461d      	mov	r5, r3
 8000924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000928:	e895 0003 	ldmia.w	r5, {r0, r1}
 800092c:	6020      	str	r0, [r4, #0]
 800092e:	3404      	adds	r4, #4
 8000930:	7021      	strb	r1, [r4, #0]
 8000932:	f107 0315 	add.w	r3, r7, #21
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	f8c3 200f 	str.w	r2, [r3, #15]
		HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8000944:	4639      	mov	r1, r7
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	2228      	movs	r2, #40	@ 0x28
 800094c:	482a      	ldr	r0, [pc, #168]	@ (80009f8 <keypadLogic+0x150>)
 800094e:	f001 fe57 	bl	8002600 <HAL_UART_Transmit>
 8000952:	e043      	b.n	80009dc <keypadLogic+0x134>
	} else
	if (HAL_GPIO_ReadPin(GPIOF, MK_Input_3_Pin) == GPIO_PIN_SET)
 8000954:	2102      	movs	r1, #2
 8000956:	4826      	ldr	r0, [pc, #152]	@ (80009f0 <keypadLogic+0x148>)
 8000958:	f000 fe02 	bl	8001560 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d11a      	bne.n	8000998 <keypadLogic+0xf0>
	{
		uint8_t message[40] = ESCAPE_YELLOW "PIN: - " ESCAPE_WHITE "7\n\r";
 8000962:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <keypadLogic+0x158>)
 8000964:	463c      	mov	r4, r7
 8000966:	461d      	mov	r5, r3
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	3404      	adds	r4, #4
 8000974:	7021      	strb	r1, [r4, #0]
 8000976:	f107 0315 	add.w	r3, r7, #21
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	f8c3 200f 	str.w	r2, [r3, #15]
		HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8000988:	4639      	mov	r1, r7
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	2228      	movs	r2, #40	@ 0x28
 8000990:	4819      	ldr	r0, [pc, #100]	@ (80009f8 <keypadLogic+0x150>)
 8000992:	f001 fe35 	bl	8002600 <HAL_UART_Transmit>
 8000996:	e021      	b.n	80009dc <keypadLogic+0x134>
	} else
	if (HAL_GPIO_ReadPin(MK_Input_4_GPIO_Port, MK_Input_4_Pin) == GPIO_PIN_SET)
 8000998:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099c:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <keypadLogic+0x15c>)
 800099e:	f000 fddf 	bl	8001560 <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d119      	bne.n	80009dc <keypadLogic+0x134>
	{
		uint8_t message[40] = ESCAPE_YELLOW "PIN: - " ESCAPE_WHITE "#\n\r";
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <keypadLogic+0x160>)
 80009aa:	463c      	mov	r4, r7
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009b6:	6020      	str	r0, [r4, #0]
 80009b8:	3404      	adds	r4, #4
 80009ba:	7021      	strb	r1, [r4, #0]
 80009bc:	f107 0315 	add.w	r3, r7, #21
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	f8c3 200f 	str.w	r2, [r3, #15]
		HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 80009ce:	4639      	mov	r1, r7
 80009d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d4:	2228      	movs	r2, #40	@ 0x28
 80009d6:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <keypadLogic+0x150>)
 80009d8:	f001 fe12 	bl	8002600 <HAL_UART_Transmit>
	}

	HAL_GPIO_WritePin(GPIOF, MK_Output_1_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2110      	movs	r1, #16
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <keypadLogic+0x148>)
 80009e2:	f000 fdd5 	bl	8001590 <HAL_GPIO_WritePin>
	return;
 80009e6:	bf00      	nop
}
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bdb0      	pop	{r4, r5, r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021400 	.word	0x40021400
 80009f4:	0800367c 	.word	0x0800367c
 80009f8:	20000100 	.word	0x20000100
 80009fc:	080036a4 	.word	0x080036a4
 8000a00:	080036cc 	.word	0x080036cc
 8000a04:	40020800 	.word	0x40020800
 8000a08:	080036f4 	.word	0x080036f4

08000a0c <toggleLED>:

void toggleLED() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000a10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <toggleLED+0x1c>)
 8000a16:	f000 fdd4 	bl	80015c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000a1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a1e:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <toggleLED+0x1c>)
 8000a20:	f000 fdcf 	bl	80015c2 <HAL_GPIO_TogglePin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021800 	.word	0x40021800

08000a2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b08c      	sub	sp, #48	@ 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	//COM5
	HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 8000a34:	2201      	movs	r2, #1
 8000a36:	490f      	ldr	r1, [pc, #60]	@ (8000a74 <HAL_UART_RxCpltCallback+0x48>)
 8000a38:	480f      	ldr	r0, [pc, #60]	@ (8000a78 <HAL_UART_RxCpltCallback+0x4c>)
 8000a3a:	f001 fe6c 	bl	8002716 <HAL_UART_Receive_IT>
	//HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 1000);

	uint8_t message[40] = ESCAPE_YELLOW "Interrupt - COM5 - " ESCAPE_WHITE __TIME__ "\n\r";
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <HAL_UART_RxCpltCallback+0x50>)
 8000a40:	f107 0408 	add.w	r4, r7, #8
 8000a44:	461d      	mov	r5, r3
 8000a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a52:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 8000a56:	f107 0108 	add.w	r1, r7, #8
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	2228      	movs	r2, #40	@ 0x28
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <HAL_UART_RxCpltCallback+0x4c>)
 8000a62:	f001 fdcd 	bl	8002600 <HAL_UART_Transmit>
	toggleLED();
 8000a66:	f7ff ffd1 	bl	8000a0c <toggleLED>
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000a4 	.word	0x200000a4
 8000a78:	20000100 	.word	0x20000100
 8000a7c:	0800371c 	.word	0x0800371c

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000a92:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <MX_SPI1_Init+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ad8:	220a      	movs	r2, #10
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_SPI1_Init+0x64>)
 8000ade:	f001 fba3 	bl	8002228 <HAL_SPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae8:	f7ff ffca 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000a8 	.word	0x200000a8
 8000af4:	40013000 	.word	0x40013000

08000af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <HAL_SPI_MspInit+0x94>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d133      	bne.n	8000b82 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b52:	23e0      	movs	r3, #224	@ 0xe0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b62:	2305      	movs	r3, #5
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	@ (8000b94 <HAL_SPI_MspInit+0x9c>)
 8000b6e:	f000 fb4b 	bl	8001208 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2023      	movs	r0, #35	@ 0x23
 8000b78:	f000 fa7d 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b7c:	2023      	movs	r0, #35	@ 0x23
 8000b7e:	f000 fa96 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f91f 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <SPI1_IRQHandler+0x10>)
 8000c4e:	f001 fb75 	bl	800233c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000a8 	.word	0x200000a8

08000c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <USART1_IRQHandler+0x10>)
 8000c62:	f001 fd7d 	bl	8002760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000100 	.word	0x20000100

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <MX_USART1_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f001 fc48 	bl	8002560 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f7ff fed3 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000100 	.word	0x20000100
 8000ce4:	40011000 	.word	0x40011000

08000ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <HAL_UART_MspInit+0x94>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d134      	bne.n	8000d74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_UART_MspInit+0x98>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <HAL_UART_MspInit+0x98>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_UART_MspInit+0x98>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f003 0310 	and.w	r3, r3, #16
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_UART_MspInit+0x98>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <HAL_UART_MspInit+0x98>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_UART_MspInit+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d54:	2307      	movs	r3, #7
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d60:	f000 fa52 	bl	8001208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2025      	movs	r0, #37	@ 0x25
 8000d6a:	f000 f984 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6e:	2025      	movs	r0, #37	@ 0x25
 8000d70:	f000 f99d 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8c:	f7ff ff70 	bl	8000c70 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fc31 	bl	800361c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fceb 	bl	8000794 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000dcc:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 8000dd0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000dd4:	2000014c 	.word	0x2000014c

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f92b 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fec2 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f943 	bl	80010ca <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f90b 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	@ (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000028 	.word	0x20000028
 8000e78:	20000030 	.word	0x20000030
 8000e7c:	2000002c 	.word	0x2000002c

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000030 	.word	0x20000030
 8000ea4:	20000148 	.word	0x20000148

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000148 	.word	0x20000148

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	@ (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff feda 	bl	8000ea8 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d008      	beq.n	8001114 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e052      	b.n	80011ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0216 	bic.w	r2, r2, #22
 8001122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001132:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <HAL_DMA_Abort+0x62>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0208 	bic.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001164:	e013      	b.n	800118e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001166:	f7ff fe9f 	bl	8000ea8 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b05      	cmp	r3, #5
 8001172:	d90c      	bls.n	800118e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e015      	b.n	80011ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e4      	bne.n	8001166 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a0:	223f      	movs	r2, #63	@ 0x3f
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d004      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2280      	movs	r2, #128	@ 0x80
 80011da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e00c      	b.n	80011fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2205      	movs	r2, #5
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e177      	b.n	8001514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8166 	bne.w	800150e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80c0 	beq.w	800150e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b66      	ldr	r3, [pc, #408]	@ (800152c <HAL_GPIO_Init+0x324>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a65      	ldr	r2, [pc, #404]	@ (800152c <HAL_GPIO_Init+0x324>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b63      	ldr	r3, [pc, #396]	@ (800152c <HAL_GPIO_Init+0x324>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013aa:	4a61      	ldr	r2, [pc, #388]	@ (8001530 <HAL_GPIO_Init+0x328>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a58      	ldr	r2, [pc, #352]	@ (8001534 <HAL_GPIO_Init+0x32c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d037      	beq.n	8001446 <HAL_GPIO_Init+0x23e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a57      	ldr	r2, [pc, #348]	@ (8001538 <HAL_GPIO_Init+0x330>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d031      	beq.n	8001442 <HAL_GPIO_Init+0x23a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a56      	ldr	r2, [pc, #344]	@ (800153c <HAL_GPIO_Init+0x334>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02b      	beq.n	800143e <HAL_GPIO_Init+0x236>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a55      	ldr	r2, [pc, #340]	@ (8001540 <HAL_GPIO_Init+0x338>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x232>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a54      	ldr	r2, [pc, #336]	@ (8001544 <HAL_GPIO_Init+0x33c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x22e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a53      	ldr	r2, [pc, #332]	@ (8001548 <HAL_GPIO_Init+0x340>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x22a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	@ (800154c <HAL_GPIO_Init+0x344>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x226>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a51      	ldr	r2, [pc, #324]	@ (8001550 <HAL_GPIO_Init+0x348>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x222>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a50      	ldr	r2, [pc, #320]	@ (8001554 <HAL_GPIO_Init+0x34c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x21e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4f      	ldr	r2, [pc, #316]	@ (8001558 <HAL_GPIO_Init+0x350>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x21a>
 800141e:	2309      	movs	r3, #9
 8001420:	e012      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001422:	230a      	movs	r3, #10
 8001424:	e010      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001426:	2308      	movs	r3, #8
 8001428:	e00e      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800142a:	2307      	movs	r3, #7
 800142c:	e00c      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800142e:	2306      	movs	r3, #6
 8001430:	e00a      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001432:	2305      	movs	r3, #5
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001436:	2304      	movs	r3, #4
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001446:	2300      	movs	r3, #0
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001458:	4935      	ldr	r1, [pc, #212]	@ (8001530 <HAL_GPIO_Init+0x328>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001466:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <HAL_GPIO_Init+0x354>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148a:	4a34      	ldr	r2, [pc, #208]	@ (800155c <HAL_GPIO_Init+0x354>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001490:	4b32      	ldr	r3, [pc, #200]	@ (800155c <HAL_GPIO_Init+0x354>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b4:	4a29      	ldr	r2, [pc, #164]	@ (800155c <HAL_GPIO_Init+0x354>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ba:	4b28      	ldr	r3, [pc, #160]	@ (800155c <HAL_GPIO_Init+0x354>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014de:	4a1f      	ldr	r2, [pc, #124]	@ (800155c <HAL_GPIO_Init+0x354>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <HAL_GPIO_Init+0x354>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001508:	4a14      	ldr	r2, [pc, #80]	@ (800155c <HAL_GPIO_Init+0x354>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	f67f ae84 	bls.w	8001224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40013800 	.word	0x40013800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021000 	.word	0x40021000
 8001548:	40021400 	.word	0x40021400
 800154c:	40021800 	.word	0x40021800
 8001550:	40021c00 	.word	0x40021c00
 8001554:	40022000 	.word	0x40022000
 8001558:	40022400 	.word	0x40022400
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43d9      	mvns	r1, r3
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e12b      	b.n	8001862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff f870 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	@ 0x24
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800164a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800165a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800165c:	f000 fdbc 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8001660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a81      	ldr	r2, [pc, #516]	@ (800186c <HAL_I2C_Init+0x274>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d807      	bhi.n	800167c <HAL_I2C_Init+0x84>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4a80      	ldr	r2, [pc, #512]	@ (8001870 <HAL_I2C_Init+0x278>)
 8001670:	4293      	cmp	r3, r2
 8001672:	bf94      	ite	ls
 8001674:	2301      	movls	r3, #1
 8001676:	2300      	movhi	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e006      	b.n	800168a <HAL_I2C_Init+0x92>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a7d      	ldr	r2, [pc, #500]	@ (8001874 <HAL_I2C_Init+0x27c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0e7      	b.n	8001862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a78      	ldr	r2, [pc, #480]	@ (8001878 <HAL_I2C_Init+0x280>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a6a      	ldr	r2, [pc, #424]	@ (800186c <HAL_I2C_Init+0x274>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d802      	bhi.n	80016cc <HAL_I2C_Init+0xd4>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	e009      	b.n	80016e0 <HAL_I2C_Init+0xe8>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4a69      	ldr	r2, [pc, #420]	@ (800187c <HAL_I2C_Init+0x284>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	3301      	adds	r3, #1
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	495c      	ldr	r1, [pc, #368]	@ (800186c <HAL_I2C_Init+0x274>)
 80016fc:	428b      	cmp	r3, r1
 80016fe:	d819      	bhi.n	8001734 <HAL_I2C_Init+0x13c>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e59      	subs	r1, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fbb1 f3f3 	udiv	r3, r1, r3
 800170e:	1c59      	adds	r1, r3, #1
 8001710:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001714:	400b      	ands	r3, r1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <HAL_I2C_Init+0x138>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1e59      	subs	r1, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fbb1 f3f3 	udiv	r3, r1, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	e051      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 8001730:	2304      	movs	r3, #4
 8001732:	e04f      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <HAL_I2C_Init+0x168>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	440b      	add	r3, r1
 800174a:	fbb0 f3f3 	udiv	r3, r0, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	e012      	b.n	8001786 <HAL_I2C_Init+0x18e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1e58      	subs	r0, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	0099      	lsls	r1, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	fbb0 f3f3 	udiv	r3, r0, r3
 8001776:	3301      	adds	r3, #1
 8001778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Init+0x196>
 800178a:	2301      	movs	r3, #1
 800178c:	e022      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10e      	bne.n	80017b4 <HAL_I2C_Init+0x1bc>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1e58      	subs	r0, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
 80017a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b2:	e00f      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	0099      	lsls	r1, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	6809      	ldr	r1, [r1, #0]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001802:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6911      	ldr	r1, [r2, #16]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68d2      	ldr	r2, [r2, #12]
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	430b      	orrs	r3, r1
 8001816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	000186a0 	.word	0x000186a0
 8001870:	001e847f 	.word	0x001e847f
 8001874:	003d08ff 	.word	0x003d08ff
 8001878:	431bde83 	.word	0x431bde83
 800187c:	10624dd3 	.word	0x10624dd3

08001880 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	d129      	bne.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2224      	movs	r2, #36	@ 0x24
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0210 	bic.w	r2, r2, #16
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0201 	orr.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b20      	cmp	r3, #32
 8001910:	d12a      	bne.n	8001968 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2224      	movs	r2, #36	@ 0x24
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	f023 030f 	bic.w	r3, r3, #15
 8001938:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	4313      	orrs	r3, r2
 8001942:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	89fa      	ldrh	r2, [r7, #14]
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e000      	b.n	800196a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e267      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d075      	beq.n	8001a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001996:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d00c      	beq.n	80019bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b85      	ldr	r3, [pc, #532]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b82      	ldr	r3, [pc, #520]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05b      	beq.n	8001a80 <HAL_RCC_OscConfig+0x108>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d157      	bne.n	8001a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e242      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x74>
 80019de:	4b76      	ldr	r3, [pc, #472]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a75      	ldr	r2, [pc, #468]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01d      	b.n	8001a28 <HAL_RCC_OscConfig+0xb0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x98>
 80019f6:	4b70      	ldr	r3, [pc, #448]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6f      	ldr	r2, [pc, #444]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6c      	ldr	r2, [pc, #432]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xb0>
 8001a10:	4b69      	ldr	r3, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a68      	ldr	r2, [pc, #416]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a65      	ldr	r2, [pc, #404]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fa3a 	bl	8000ea8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fa36 	bl	8000ea8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e207      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0xc0>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fa26 	bl	8000ea8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fa22 	bl	8000ea8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1f3      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	4b51      	ldr	r3, [pc, #324]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0xe8>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d063      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d11c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa6:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d116      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x152>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1c7      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4937      	ldr	r1, [pc, #220]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	e03a      	b.n	8001b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <HAL_RCC_OscConfig+0x244>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f9db 	bl	8000ea8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f9d7 	bl	8000ea8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1a8      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4925      	ldr	r1, [pc, #148]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x244>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f9ba 	bl	8000ea8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff f9b6 	bl	8000ea8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e187      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d036      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_RCC_OscConfig+0x248>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f99a 	bl	8000ea8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f996 	bl	8000ea8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e167      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x200>
 8001b96:	e01b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_RCC_OscConfig+0x248>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f983 	bl	8000ea8 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	e00e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f97f 	bl	8000ea8 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d907      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e150      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470000 	.word	0x42470000
 8001bc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ea      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8097 	beq.w	8001d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be2:	4b81      	ldr	r3, [pc, #516]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b7d      	ldr	r3, [pc, #500]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b7a      	ldr	r3, [pc, #488]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b77      	ldr	r3, [pc, #476]	@ (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b74      	ldr	r3, [pc, #464]	@ (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a73      	ldr	r2, [pc, #460]	@ (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff f93f 	bl	8000ea8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff f93b 	bl	8000ea8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e10c      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b6a      	ldr	r3, [pc, #424]	@ (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2ea>
 8001c54:	4b64      	ldr	r3, [pc, #400]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c58:	4a63      	ldr	r2, [pc, #396]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x324>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x30c>
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c76:	4b5c      	ldr	r3, [pc, #368]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0x324>
 8001c84:	4b58      	ldr	r3, [pc, #352]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a57      	ldr	r2, [pc, #348]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c90:	4b55      	ldr	r3, [pc, #340]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c94:	4a54      	ldr	r2, [pc, #336]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f023 0304 	bic.w	r3, r3, #4
 8001c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f900 	bl	8000ea8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff f8fc 	bl	8000ea8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0cb      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	4b49      	ldr	r3, [pc, #292]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ee      	beq.n	8001cac <HAL_RCC_OscConfig+0x334>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f8ea 	bl	8000ea8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f8e6 	bl	8000ea8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0b5      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	4b3e      	ldr	r3, [pc, #248]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ee      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	4a38      	ldr	r2, [pc, #224]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a1 	beq.w	8001e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d16:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d05c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d141      	bne.n	8001dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <HAL_RCC_OscConfig+0x478>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f8ba 	bl	8000ea8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f8b6 	bl	8000ea8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e087      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	491b      	ldr	r1, [pc, #108]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <HAL_RCC_OscConfig+0x478>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff f88f 	bl	8000ea8 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f88b 	bl	8000ea8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e05c      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x416>
 8001dac:	e054      	b.n	8001e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_RCC_OscConfig+0x478>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff f878 	bl	8000ea8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f874 	bl	8000ea8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e045      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x444>
 8001dda:	e03d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e038      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000
 8001df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_RCC_OscConfig+0x4ec>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d028      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d121      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0cc      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b68      	ldr	r3, [pc, #416]	@ (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d90c      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b65      	ldr	r3, [pc, #404]	@ (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	@ (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d044      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d119      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b3f      	ldr	r3, [pc, #252]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e067      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b37      	ldr	r3, [pc, #220]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4934      	ldr	r1, [pc, #208]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7fe ffa6 	bl	8000ea8 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7fe ffa2 	bl	8000ea8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e04f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b25      	ldr	r3, [pc, #148]	@ (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d20c      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f821 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	490a      	ldr	r1, [pc, #40]	@ (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	5ccb      	ldrb	r3, [r1, r3]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe ff06 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00
 8002024:	40023800 	.word	0x40023800
 8002028:	0800376c 	.word	0x0800376c
 800202c:	20000028 	.word	0x20000028
 8002030:	2000002c 	.word	0x2000002c

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002038:	b090      	sub	sp, #64	@ 0x40
 800203a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002040:	2300      	movs	r3, #0
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002044:	2300      	movs	r3, #0
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204c:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d00d      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x40>
 8002058:	2b08      	cmp	r3, #8
 800205a:	f200 80a1 	bhi.w	80021a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x34>
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x3a>
 8002066:	e09b      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b53      	ldr	r3, [pc, #332]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800206c:	e09b      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800206e:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002072:	e098      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002074:	4b4f      	ldr	r3, [pc, #316]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800207c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207e:	4b4d      	ldr	r3, [pc, #308]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d028      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208a:	4b4a      	ldr	r3, [pc, #296]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	2200      	movs	r2, #0
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	627a      	str	r2, [r7, #36]	@ 0x24
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800209c:	2100      	movs	r1, #0
 800209e:	4b47      	ldr	r3, [pc, #284]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x188>)
 80020a0:	fb03 f201 	mul.w	r2, r3, r1
 80020a4:	2300      	movs	r3, #0
 80020a6:	fb00 f303 	mul.w	r3, r0, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	4a43      	ldr	r2, [pc, #268]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x188>)
 80020ae:	fba0 1202 	umull	r1, r2, r0, r2
 80020b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020b4:	460a      	mov	r2, r1
 80020b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ba:	4413      	add	r3, r2
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c0:	2200      	movs	r2, #0
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	61fa      	str	r2, [r7, #28]
 80020c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020ce:	f7fe f88d 	bl	80001ec <__aeabi_uldivmod>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4613      	mov	r3, r2
 80020d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020da:	e053      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020dc:	4b35      	ldr	r3, [pc, #212]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	2200      	movs	r2, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	617a      	str	r2, [r7, #20]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020ee:	f04f 0b00 	mov.w	fp, #0
 80020f2:	4652      	mov	r2, sl
 80020f4:	465b      	mov	r3, fp
 80020f6:	f04f 0000 	mov.w	r0, #0
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	0159      	lsls	r1, r3, #5
 8002100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002104:	0150      	lsls	r0, r2, #5
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	ebb2 080a 	subs.w	r8, r2, sl
 800210e:	eb63 090b 	sbc.w	r9, r3, fp
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800211e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002122:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002126:	ebb2 0408 	subs.w	r4, r2, r8
 800212a:	eb63 0509 	sbc.w	r5, r3, r9
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	00eb      	lsls	r3, r5, #3
 8002138:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800213c:	00e2      	lsls	r2, r4, #3
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	eb14 030a 	adds.w	r3, r4, sl
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	eb45 030b 	adc.w	r3, r5, fp
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800215a:	4629      	mov	r1, r5
 800215c:	028b      	lsls	r3, r1, #10
 800215e:	4621      	mov	r1, r4
 8002160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002164:	4621      	mov	r1, r4
 8002166:	028a      	lsls	r2, r1, #10
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216e:	2200      	movs	r2, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	60fa      	str	r2, [r7, #12]
 8002174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002178:	f7fe f838 	bl	80001ec <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	3301      	adds	r3, #1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002194:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80021a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3740      	adds	r7, #64	@ 0x40
 80021ac:	46bd      	mov	sp, r7
 80021ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	017d7840 	.word	0x017d7840

080021c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000028 	.word	0x20000028

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff0 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	@ (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	0800377c 	.word	0x0800377c

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002204:	f7ff ffdc 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0b5b      	lsrs	r3, r3, #13
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	@ (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	0800377c 	.word	0x0800377c

08002228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07b      	b.n	8002332 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800224a:	d009      	beq.n	8002260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
 8002252:	e005      	b.n	8002260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fc3c 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	ea42 0103 	orr.w	r1, r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	f003 0104 	and.w	r1, r3, #4
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	f003 0210 	and.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10e      	bne.n	800237c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
    return;
 800237a:	e0ce      	b.n	800251a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_SPI_IRQHandler+0x5e>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4798      	blx	r3
    return;
 8002398:	e0bf      	b.n	800251a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_SPI_IRQHandler+0x7e>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80b0 	beq.w	800251a <HAL_SPI_IRQHandler+0x1de>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80aa 	beq.w	800251a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d011      	beq.n	8002400 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	f043 0204 	orr.w	r2, r3, #4
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	e00b      	b.n	8002418 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
        return;
 8002416:	e080      	b.n	800251a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	f043 0208 	orr.w	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	2b00      	cmp	r3, #0
 8002476:	d04f      	beq.n	8002518 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002486:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <HAL_SPI_IRQHandler+0x168>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d034      	beq.n	800250e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0203 	bic.w	r2, r2, #3
 80024b2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d011      	beq.n	80024e0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c0:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_SPI_IRQHandler+0x1e4>)
 80024c2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fe7a 	bl	80011c2 <HAL_DMA_Abort_IT>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d016      	beq.n	8002516 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002520 <HAL_SPI_IRQHandler+0x1e4>)
 80024ee:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fe64 	bl	80011c2 <HAL_DMA_Abort_IT>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800250c:	e003      	b.n	8002516 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f808 	bl	8002524 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002514:	e000      	b.n	8002518 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002516:	bf00      	nop
    return;
 8002518:	bf00      	nop
  }
}
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	08002539 	.word	0x08002539

08002524 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff ffe6 	bl	8002524 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e042      	b.n	80025f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fbae 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fdbd 	bl	8003124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	@ 0x28
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d175      	bne.n	800270c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_UART_Transmit+0x2c>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e06e      	b.n	800270e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2221      	movs	r2, #33	@ 0x21
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800263e:	f7fe fc33 	bl	8000ea8 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002658:	d108      	bne.n	800266c <HAL_UART_Transmit+0x6c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e003      	b.n	8002674 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002674:	e02e      	b.n	80026d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	@ 0x80
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fb1f 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e03a      	b.n	800270e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3302      	adds	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e007      	b.n	80026c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1cb      	bne.n	8002676 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2140      	movs	r1, #64	@ 0x40
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 faeb 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e006      	b.n	800270e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	4613      	mov	r3, r2
 8002722:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b20      	cmp	r3, #32
 800272e:	d112      	bne.n	8002756 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_UART_Receive_IT+0x26>
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e00b      	b.n	8002758 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	461a      	mov	r2, r3
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fb12 	bl	8002d76 <UART_Start_Receive_IT>
 8002752:	4603      	mov	r3, r0
 8002754:	e000      	b.n	8002758 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0ba      	sub	sp, #232	@ 0xe8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800279e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_UART_IRQHandler+0x66>
 80027b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fbf2 	bl	8002fa8 <UART_Receive_IT>
      return;
 80027c4:	e25b      	b.n	8002c7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80de 	beq.w	800298c <HAL_UART_IRQHandler+0x22c>
 80027d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80d1 	beq.w	800298c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_UART_IRQHandler+0xae>
 80027f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_UART_IRQHandler+0xd2>
 800281a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_UART_IRQHandler+0xf6>
 800283e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d011      	beq.n	8002886 <HAL_UART_IRQHandler+0x126>
 8002862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800286e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f043 0208 	orr.w	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 81f2 	beq.w	8002c74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_UART_IRQHandler+0x14e>
 800289c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb7d 	bl	8002fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d103      	bne.n	80028da <HAL_UART_IRQHandler+0x17a>
 80028d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04f      	beq.n	800297a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa85 	bl	8002dea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ea:	2b40      	cmp	r3, #64	@ 0x40
 80028ec:	d141      	bne.n	8002972 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3314      	adds	r3, #20
 80028f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002904:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800290c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3314      	adds	r3, #20
 8002916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800291a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800291e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1d9      	bne.n	80028ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d013      	beq.n	800296a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	4a7e      	ldr	r2, [pc, #504]	@ (8002b40 <HAL_UART_IRQHandler+0x3e0>)
 8002948:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fc37 	bl	80011c2 <HAL_DMA_Abort_IT>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002964:	4610      	mov	r0, r2
 8002966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002968:	e00e      	b.n	8002988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f994 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002970:	e00a      	b.n	8002988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f990 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	e006      	b.n	8002988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f98c 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002986:	e175      	b.n	8002c74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	bf00      	nop
    return;
 800298a:	e173      	b.n	8002c74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	2b01      	cmp	r3, #1
 8002992:	f040 814f 	bne.w	8002c34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8148 	beq.w	8002c34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8141 	beq.w	8002c34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b40      	cmp	r3, #64	@ 0x40
 80029d4:	f040 80b6 	bne.w	8002b44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8145 	beq.w	8002c78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f080 813e 	bcs.w	8002c78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0e:	f000 8088 	beq.w	8002b22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1d9      	bne.n	8002a12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3314      	adds	r3, #20
 8002a64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e1      	bne.n	8002a5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e3      	bne.n	8002a9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aea:	e853 3f00 	ldrex	r3, [r3]
 8002aee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af2:	f023 0310 	bic.w	r3, r3, #16
 8002af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b0c:	e841 2300 	strex	r3, r2, [r1]
 8002b10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e3      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fae0 	bl	80010e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8b7 	bl	8002cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b3e:	e09b      	b.n	8002c78 <HAL_UART_IRQHandler+0x518>
 8002b40:	08002eb1 	.word	0x08002eb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 808e 	beq.w	8002c7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8089 	beq.w	8002c7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e3      	bne.n	8002b6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e3      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0310 	bic.w	r3, r3, #16
 8002bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c0c:	61fa      	str	r2, [r7, #28]
 8002c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	69b9      	ldr	r1, [r7, #24]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	617b      	str	r3, [r7, #20]
   return(result);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e3      	bne.n	8002be8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f83d 	bl	8002cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c32:	e023      	b.n	8002c7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_UART_IRQHandler+0x4f4>
 8002c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f943 	bl	8002ed8 <UART_Transmit_IT>
    return;
 8002c52:	e014      	b.n	8002c7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <HAL_UART_IRQHandler+0x51e>
 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f983 	bl	8002f78 <UART_EndTransmit_IT>
    return;
 8002c72:	e004      	b.n	8002c7e <HAL_UART_IRQHandler+0x51e>
    return;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c7c:	bf00      	nop
  }
}
 8002c7e:	37e8      	adds	r7, #232	@ 0xe8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd4:	e03b      	b.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d037      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe f8e3 	bl	8000ea8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	6a3a      	ldr	r2, [r7, #32]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e03a      	b.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d023      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b80      	cmp	r3, #128	@ 0x80
 8002d0a:	d020      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d01d      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d116      	bne.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f857 	bl	8002dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d0b4      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2222      	movs	r2, #34	@ 0x22
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b095      	sub	sp, #84	@ 0x54
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e12:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e5      	bne.n	8002df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e5      	bne.n	8002e26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d119      	bne.n	8002e96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f023 0310 	bic.w	r3, r3, #16
 8002e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e82:	61ba      	str	r2, [r7, #24]
 8002e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ea4:	bf00      	nop
 8002ea6:	3754      	adds	r7, #84	@ 0x54
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff fee4 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b21      	cmp	r3, #33	@ 0x21
 8002eea:	d13e      	bne.n	8002f6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef4:	d114      	bne.n	8002f20 <UART_Transmit_IT+0x48>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d110      	bne.n	8002f20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]
 8002f1e:	e008      	b.n	8002f32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	1c59      	adds	r1, r3, #1
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6211      	str	r1, [r2, #32]
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fe73 	bl	8002c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	@ 0x30
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b22      	cmp	r3, #34	@ 0x22
 8002fba:	f040 80ae 	bne.w	800311a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc6:	d117      	bne.n	8002ff8 <UART_Receive_IT+0x50>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d113      	bne.n	8002ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ff6:	e026      	b.n	8003046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d007      	beq.n	800301c <UART_Receive_IT+0x74>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <UART_Receive_IT+0x82>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4619      	mov	r1, r3
 8003054:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003056:	2b00      	cmp	r3, #0
 8003058:	d15d      	bne.n	8003116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0220 	bic.w	r2, r2, #32
 8003068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	2b01      	cmp	r3, #1
 800309e:	d135      	bne.n	800310c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	613b      	str	r3, [r7, #16]
   return(result);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f023 0310 	bic.w	r3, r3, #16
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	623a      	str	r2, [r7, #32]
 80030c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	69f9      	ldr	r1, [r7, #28]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d10a      	bne.n	80030fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fdd1 	bl	8002cac <HAL_UARTEx_RxEventCallback>
 800310a:	e002      	b.n	8003112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd fc8d 	bl	8000a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e002      	b.n	800311c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3730      	adds	r7, #48	@ 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b0c0      	sub	sp, #256	@ 0x100
 800312a:	af00      	add	r7, sp, #0
 800312c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	ea40 0301 	orr.w	r3, r0, r1
 800314c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	431a      	orrs	r2, r3
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800317c:	f021 010c 	bic.w	r1, r1, #12
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800318a:	430b      	orrs	r3, r1
 800318c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	6999      	ldr	r1, [r3, #24]
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	ea40 0301 	orr.w	r3, r0, r1
 80031aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b8f      	ldr	r3, [pc, #572]	@ (80033f0 <UART_SetConfig+0x2cc>)
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d005      	beq.n	80031c4 <UART_SetConfig+0xa0>
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b8d      	ldr	r3, [pc, #564]	@ (80033f4 <UART_SetConfig+0x2d0>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d104      	bne.n	80031ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c4:	f7ff f81c 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80031c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031cc:	e003      	b.n	80031d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ce:	f7ff f803 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 80031d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e0:	f040 810c 	bne.w	80033fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031fe:	415b      	adcs	r3, r3
 8003200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003206:	4621      	mov	r1, r4
 8003208:	eb12 0801 	adds.w	r8, r2, r1
 800320c:	4629      	mov	r1, r5
 800320e:	eb43 0901 	adc.w	r9, r3, r1
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003226:	4690      	mov	r8, r2
 8003228:	4699      	mov	r9, r3
 800322a:	4623      	mov	r3, r4
 800322c:	eb18 0303 	adds.w	r3, r8, r3
 8003230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003234:	462b      	mov	r3, r5
 8003236:	eb49 0303 	adc.w	r3, r9, r3
 800323a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800324a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800324e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003252:	460b      	mov	r3, r1
 8003254:	18db      	adds	r3, r3, r3
 8003256:	653b      	str	r3, [r7, #80]	@ 0x50
 8003258:	4613      	mov	r3, r2
 800325a:	eb42 0303 	adc.w	r3, r2, r3
 800325e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003268:	f7fc ffc0 	bl	80001ec <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b61      	ldr	r3, [pc, #388]	@ (80033f8 <UART_SetConfig+0x2d4>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	011c      	lsls	r4, r3, #4
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003294:	415b      	adcs	r3, r3
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800329c:	4641      	mov	r1, r8
 800329e:	eb12 0a01 	adds.w	sl, r2, r1
 80032a2:	4649      	mov	r1, r9
 80032a4:	eb43 0b01 	adc.w	fp, r3, r1
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032bc:	4692      	mov	sl, r2
 80032be:	469b      	mov	fp, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	eb1a 0303 	adds.w	r3, sl, r3
 80032c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ca:	464b      	mov	r3, r9
 80032cc:	eb4b 0303 	adc.w	r3, fp, r3
 80032d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032e8:	460b      	mov	r3, r1
 80032ea:	18db      	adds	r3, r3, r3
 80032ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ee:	4613      	mov	r3, r2
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032fe:	f7fc ff75 	bl	80001ec <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4611      	mov	r1, r2
 8003308:	4b3b      	ldr	r3, [pc, #236]	@ (80033f8 <UART_SetConfig+0x2d4>)
 800330a:	fba3 2301 	umull	r2, r3, r3, r1
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	@ 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800331e:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <UART_SetConfig+0x2d4>)
 8003320:	fba3 2302 	umull	r2, r3, r3, r2
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800332c:	441c      	add	r4, r3
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800333c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003348:	415b      	adcs	r3, r3
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800334c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003350:	4641      	mov	r1, r8
 8003352:	1851      	adds	r1, r2, r1
 8003354:	6339      	str	r1, [r7, #48]	@ 0x30
 8003356:	4649      	mov	r1, r9
 8003358:	414b      	adcs	r3, r1
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003368:	4659      	mov	r1, fp
 800336a:	00cb      	lsls	r3, r1, #3
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003372:	4651      	mov	r1, sl
 8003374:	00ca      	lsls	r2, r1, #3
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	4603      	mov	r3, r0
 800337c:	4642      	mov	r2, r8
 800337e:	189b      	adds	r3, r3, r2
 8003380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003384:	464b      	mov	r3, r9
 8003386:	460a      	mov	r2, r1
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800339c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033a4:	460b      	mov	r3, r1
 80033a6:	18db      	adds	r3, r3, r3
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033aa:	4613      	mov	r3, r2
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ba:	f7fc ff17 	bl	80001ec <__aeabi_uldivmod>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <UART_SetConfig+0x2d4>)
 80033c4:	fba3 1302 	umull	r1, r3, r3, r2
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	2164      	movs	r1, #100	@ 0x64
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	3332      	adds	r3, #50	@ 0x32
 80033d6:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <UART_SetConfig+0x2d4>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	f003 0207 	and.w	r2, r3, #7
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4422      	add	r2, r4
 80033ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033ec:	e106      	b.n	80035fc <UART_SetConfig+0x4d8>
 80033ee:	bf00      	nop
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003400:	2200      	movs	r2, #0
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800340a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800340e:	4642      	mov	r2, r8
 8003410:	464b      	mov	r3, r9
 8003412:	1891      	adds	r1, r2, r2
 8003414:	6239      	str	r1, [r7, #32]
 8003416:	415b      	adcs	r3, r3
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
 800341a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800341e:	4641      	mov	r1, r8
 8003420:	1854      	adds	r4, r2, r1
 8003422:	4649      	mov	r1, r9
 8003424:	eb43 0501 	adc.w	r5, r3, r1
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	00eb      	lsls	r3, r5, #3
 8003432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003436:	00e2      	lsls	r2, r4, #3
 8003438:	4614      	mov	r4, r2
 800343a:	461d      	mov	r5, r3
 800343c:	4643      	mov	r3, r8
 800343e:	18e3      	adds	r3, r4, r3
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003444:	464b      	mov	r3, r9
 8003446:	eb45 0303 	adc.w	r3, r5, r3
 800344a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800345a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800346a:	4629      	mov	r1, r5
 800346c:	008b      	lsls	r3, r1, #2
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003474:	4621      	mov	r1, r4
 8003476:	008a      	lsls	r2, r1, #2
 8003478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800347c:	f7fc feb6 	bl	80001ec <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b60      	ldr	r3, [pc, #384]	@ (8003608 <UART_SetConfig+0x4e4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800349c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	61b9      	str	r1, [r7, #24]
 80034a8:	415b      	adcs	r3, r3
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b0:	4641      	mov	r1, r8
 80034b2:	1851      	adds	r1, r2, r1
 80034b4:	6139      	str	r1, [r7, #16]
 80034b6:	4649      	mov	r1, r9
 80034b8:	414b      	adcs	r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	00cb      	lsls	r3, r1, #3
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d2:	4651      	mov	r1, sl
 80034d4:	00ca      	lsls	r2, r1, #3
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	4642      	mov	r2, r8
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e4:	464b      	mov	r3, r9
 80034e6:	460a      	mov	r2, r1
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003508:	4649      	mov	r1, r9
 800350a:	008b      	lsls	r3, r1, #2
 800350c:	4641      	mov	r1, r8
 800350e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003512:	4641      	mov	r1, r8
 8003514:	008a      	lsls	r2, r1, #2
 8003516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800351a:	f7fc fe67 	bl	80001ec <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4611      	mov	r1, r2
 8003524:	4b38      	ldr	r3, [pc, #224]	@ (8003608 <UART_SetConfig+0x4e4>)
 8003526:	fba3 2301 	umull	r2, r3, r3, r1
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2264      	movs	r2, #100	@ 0x64
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	1acb      	subs	r3, r1, r3
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	3332      	adds	r3, #50	@ 0x32
 8003538:	4a33      	ldr	r2, [pc, #204]	@ (8003608 <UART_SetConfig+0x4e4>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003544:	441c      	add	r4, r3
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354a:	2200      	movs	r2, #0
 800354c:	673b      	str	r3, [r7, #112]	@ 0x70
 800354e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	415b      	adcs	r3, r3
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003596:	464b      	mov	r3, r9
 8003598:	460a      	mov	r2, r1
 800359a:	eb42 0303 	adc.w	r3, r2, r3
 800359e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035b8:	4649      	mov	r1, r9
 80035ba:	008b      	lsls	r3, r1, #2
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c2:	4641      	mov	r1, r8
 80035c4:	008a      	lsls	r2, r1, #2
 80035c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035ca:	f7fc fe0f 	bl	80001ec <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <UART_SetConfig+0x4e4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	@ 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	3332      	adds	r3, #50	@ 0x32
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <UART_SetConfig+0x4e4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4422      	add	r2, r4
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003602:	46bd      	mov	sp, r7
 8003604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003608:	51eb851f 	.word	0x51eb851f

0800360c <memset>:
 800360c:	4402      	add	r2, r0
 800360e:	4603      	mov	r3, r0
 8003610:	4293      	cmp	r3, r2
 8003612:	d100      	bne.n	8003616 <memset+0xa>
 8003614:	4770      	bx	lr
 8003616:	f803 1b01 	strb.w	r1, [r3], #1
 800361a:	e7f9      	b.n	8003610 <memset+0x4>

0800361c <__libc_init_array>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4d0d      	ldr	r5, [pc, #52]	@ (8003654 <__libc_init_array+0x38>)
 8003620:	4c0d      	ldr	r4, [pc, #52]	@ (8003658 <__libc_init_array+0x3c>)
 8003622:	1b64      	subs	r4, r4, r5
 8003624:	10a4      	asrs	r4, r4, #2
 8003626:	2600      	movs	r6, #0
 8003628:	42a6      	cmp	r6, r4
 800362a:	d109      	bne.n	8003640 <__libc_init_array+0x24>
 800362c:	4d0b      	ldr	r5, [pc, #44]	@ (800365c <__libc_init_array+0x40>)
 800362e:	4c0c      	ldr	r4, [pc, #48]	@ (8003660 <__libc_init_array+0x44>)
 8003630:	f000 f818 	bl	8003664 <_init>
 8003634:	1b64      	subs	r4, r4, r5
 8003636:	10a4      	asrs	r4, r4, #2
 8003638:	2600      	movs	r6, #0
 800363a:	42a6      	cmp	r6, r4
 800363c:	d105      	bne.n	800364a <__libc_init_array+0x2e>
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	f855 3b04 	ldr.w	r3, [r5], #4
 8003644:	4798      	blx	r3
 8003646:	3601      	adds	r6, #1
 8003648:	e7ee      	b.n	8003628 <__libc_init_array+0xc>
 800364a:	f855 3b04 	ldr.w	r3, [r5], #4
 800364e:	4798      	blx	r3
 8003650:	3601      	adds	r6, #1
 8003652:	e7f2      	b.n	800363a <__libc_init_array+0x1e>
 8003654:	0800378c 	.word	0x0800378c
 8003658:	0800378c 	.word	0x0800378c
 800365c:	0800378c 	.word	0x0800378c
 8003660:	08003790 	.word	0x08003790

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
